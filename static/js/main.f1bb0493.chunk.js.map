{"version":3,"sources":["components/account/Login.js","components/account/Register.js","components/account/Logout.js","components/leftBar/CalendarEntry.js","components/leftBar/CalendarList.js","components/account/Welcome.js","components/leftBar/EventsTypeSelector.js","components/leftBar/LeftBar.js","components/calendar/TopNav.js","components/calendar/agenda/AgendaStack.js","components/calendar/agenda/AgendaView.js","components/calendar/month/Day.js","components/calendar/month/Week.js","components/calendar/month/MonthView.js","components/calendar/year/Month.js","components/calendar/year/YearRow.js","components/calendar/year/YearView.js","components/calendar/CalendarBody.js","components/calendar/modal/CreateEvent.js","components/calendar/modal/CreateArrangement.js","components/calendar/modal/CreateReminder.js","components/calendar/modal/CreateTask.js","components/calendar/modal/ArrangementDetails.js","components/calendar/modal/ReminderDetails.js","components/calendar/modal/TaskDetails.js","components/calendar/Calendar.js","components/ScreenSmall.js","components/CalendarMain.js","components/calendars/CalendarCreate.js","components/calendars/CalendarEdit.js","components/calendars/CalendarUpdateMain.js","components/calendars/CalendarDelete.js","components/events/EventCreate.js","components/events/ArrangementCreate.js","components/events/ReminderCreate.js","components/events/TaskCreate.js","App.js","reportWebVitals.js","index.js"],"names":["Login","props","useState","email","setEmail","password","setPassword","loginRedirect","setLoginRedirect","loginError","setLoginError","toast","setToast","toastRegistered","setToastRegistered","justRegistered","useLocation","state","submit","e","a","preventDefault","fetch","process","method","headers","credentials","body","JSON","stringify","then","response","ok","error","Error","status","statusText","json","setUser","catch","toString","to","loginErrorText","Toast","onClose","show","delay","autohide","Header","src","className","alt","Body","justRegisteredText","undefined","ToastContainer","position","Form","onSubmit","Floating","controlid","Control","type","placeholder","onChange","target","value","required","Label","Button","variant","size","Register","name","setName","registerRedirect","setRegisterRedirect","registerError","setRegisterError","pathname","registerErrorText","Logout","logoutRedirect","setLogoutRedirect","user","CalendarEntry","mainCalendarText","main_calendar","calendar","id","title","color","onClick","visible","fetchCalendars","alert","setVisibleCalendar","CalendarList","userLoaded","calendarsLoaded","Spinner","animation","role","calendarsList","calendars","map","Welcome","EventsTypeSelector","Check","defaultChecked","showAllDayEvents","setShowAllDayEvents","updateEvents","showTimeSpecificEvents","setShowTimeSpecificEvents","showArrangements","setShowArrangements","showReminders","setShowReminders","showTasks","setShowTasks","LeftBar","length","TopNav","isMobile","useMediaQuery","query","isScreenSmall","todayButton","currentDateClassName","view","moment","viewDate","format","ButtonGroup","setViewDate","viewButtons","setView","username","match","join","viewAdjust","displayDate","displayDateLight","topNavClass","subtract","add","AgendaStack","eventsLoaded","dayDate","events","forEach","event","filter","calendar_id","parseInt","start","end","all_day","diff","isBetween","startText","endText","push","setShowEventModal","is_done","icon","AgendaView","date","firstDay","startOf","lastDay","endOf","month","i","week","miniCalendar","goToMonth","index","day","goToDay","d","showEventModal","Day","cn","today","Week","firstDayDate","MonthView","weeks","arr","j","weeksJS","style","zIndex","Month","w","YearRow","row","YearView","months","monthsJS","CalendarBody","CreateEvent","setDate","setCalendarSelectedDate","split","Modal","onHide","closeButton","Title","setShowArrangementModal","setShowReminderModal","setShowTaskModal","CreateArrangement","description","setDescription","calendarSelectedDate","startDate","setStartDate","endDate","setEndDate","allDay","setAllDay","startTime","setStartTime","endTime","setEndTime","setCalendar","setColor","setCalendars","setCalendarsLoaded","useEffect","fetchData","selectAllDay","defaultValue","isBefore","Select","CreateReminder","CreateTask","isDone","ArrangementDetails","eventLoaded","setEventLoaded","fetchArrangement","useCallback","arrangement","setShowArrangementDetailsModal","hideModal","content","showArrangementDetailsModal","ReminderDetails","fetchReminder","reminder","setShowReminderDetailsModal","showReminderDetailsModal","TaskDetails","setIsDone","fetchTask","task","setShowTaskDetailsModal","doneButton","showTaskDetailsModal","Calendar","redirectToLogin","showArrangementModal","showReminderModal","showTaskModal","createEvent","arrangementDetails","reminderDetails","taskDetails","classList","indexOf","createArrangement","createReminder","createTask","ScreenSmall","width","height","CalendarMain","setEvents","setEventsLoaded","CalendarCreate","createCalendarCreateRedirect","setCalendarCreateRedirect","withRouter","calendarEditRedirect","setCalendarEditRedirect","history","useHistory","calendarInfo","params","calendarControl","mainName","calendarUpdateMainRedirect","setCalendarUpdateMainRedirect","calendarDeleteRedirect","setCalendarDeleteRedirect","deleteButton","Alert","EventCreate","ArrangementCreate","arrangementCreateRedirect","setArrangementCreateRedirect","ReminderCreate","reminderCreateRedirect","setReminderCreateRedirect","TaskCreate","taskCreateRedirect","setTaskCreateRedirect","App","setUserLoaded","fetchUser","path","exact","component","CalendarUpdateMain","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1bb0493.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport { useLocation } from 'react-router';\nimport { Button, Form, Toast, ToastContainer } from 'react-bootstrap';\nimport { BoxArrowInRight } from 'react-bootstrap-icons';\n\n\nconst Login = (props) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const [loginRedirect, setLoginRedirect] = useState(false);\n    const [loginError, setLoginError] = useState('');\n    const [toast, setToast] = useState(false);\n\n    const [toastRegistered, setToastRegistered] = useState(true);\n\n    let justRegistered = useLocation().state;\n\n    const submit = async (e) => {\n        e.preventDefault();\n        setLoginError('');\n        setToast(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setLoginRedirect(true);\n                setLoginError('');\n                props.setUser(response);\n                setToastRegistered(false);\n            })\n            .catch(error => {\n                setLoginError(error.toString());\n                setToast(true);\n                setToastRegistered(false);\n            });\n    }\n\n    if (loginRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    let loginErrorText = (\n        <Toast onClose={() => setToast(false)} show={toast} delay={5000} autohide>\n            <Toast.Header>\n                <img src=\"logo-20x20.png\" className=\"rounded me-2\" alt=\"PLANSE\" />\n                <strong className=\"me-auto\">Invalid Login</strong>\n            </Toast.Header>\n            <Toast.Body>{loginError}</Toast.Body>\n        </Toast>\n    );\n    if (loginError === 'Error: Error 401: Unauthorized' || loginError === 'Error: Error 401: ') {\n        loginErrorText = (\n            <Toast onClose={() => setToast(false)} show={toast} delay={5000} autohide>\n                <Toast.Header>\n                    <img src=\"logo-20x20.png\" className=\"rounded me-2\" alt=\"PLANSE\" />\n                    <strong className=\"me-auto\">Invalid Login</strong>\n                </Toast.Header>\n                <Toast.Body>Email or password incorrect.</Toast.Body>\n            </Toast>\n        );\n    }\n\n    let justRegisteredText = (\n        <div></div>\n    );\n    if (justRegistered !== undefined && !loginError) {\n        if (justRegistered['justRegistered'] !== 'false') {\n            justRegisteredText = (\n                <Toast onClose={() => setToastRegistered(false)} show={toastRegistered} delay={5000} autohide>\n                    <Toast.Header>\n                        <img src=\"logo-20x20.png\" className=\"rounded me-2\" alt=\"PLANSE\" />\n                        <strong className=\"me-auto\">Account Registered</strong>\n                    </Toast.Header>\n                    <Toast.Body>Now you can login with your email and password.</Toast.Body>\n                </Toast>\n            );\n        }\n    }\n\n    return (\n        <div>\n            <ToastContainer position=\"bottom-end\" className=\"p-3\">\n                {loginError ? loginErrorText : ''}\n                {justRegisteredText}\n            </ToastContainer>\n\n            <Form className=\"formCard\" onSubmit={submit}>\n                <p className=\"text-center\">\n                    <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                </p>\n\n                <h1 className=\"h3 mb-3 fw-normal text-center\">Login to PLANSE</h1>\n\n                <p className=\"text-center\">\n                    <Link to=\"/register\">Register instead</Link>\n                </p>\n\n                <Form.Floating controlid=\"formEmail\">\n                    <Form.Control type=\"email\" className=\"top\" placeholder=\"name@example.com\" onChange={e => setEmail(e.target.value)} required />\n                    <Form.Label>Email</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formPassword\">\n                    <Form.Control type=\"password\" className=\"bottom\" placeholder=\"password\" onChange={e => setPassword(e.target.value)} required />\n                    <Form.Label>Password</Form.Label>\n                </Form.Floating>\n\n                <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100\">Log in <BoxArrowInRight /></Button>\n\n                <p className=\"mt-5 mb-3 text-muted text-center\">&copy; PLANSE, 2021</p>\n            </Form>\n        </div>\n    );\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Button, Form, Toast, ToastContainer } from 'react-bootstrap';\nimport { BoxArrowRight } from 'react-bootstrap-icons';\nimport { Redirect, Link } from 'react-router-dom';\n\n\nconst Register = () => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const [registerRedirect, setRegisterRedirect] = useState(false);\n    const [registerError, setRegisterError] = useState('');\n    const [toast, setToast] = useState(false);\n\n    const submit = async (e) => {\n        e.preventDefault();\n        setRegisterError('');\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/register', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                name,\n                email,\n                password\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setRegisterRedirect(true);\n                setRegisterError('');\n                setToast(false);\n                // props.setUser(response);\n            })\n            .catch(error => {\n                setRegisterError(error.toString());\n                setToast(true);\n            });\n    }\n\n    if (registerRedirect) {\n        return (\n            <Redirect to={{ pathname: '/login', state: { justRegistered: 'true' } }}\n            />\n        );\n    }\n\n    let registerErrorText = (\n        <Toast onClose={() => setToast(false)} show={toast} delay={5000} autohide>\n                <Toast.Header>\n                    <img src=\"logo-20x20.png\" className=\"rounded me-2\" alt=\"PLANSE\" />\n                    <strong className=\"me-auto\">Register Error</strong>\n                </Toast.Header>\n                <Toast.Body>{registerError}</Toast.Body>\n            </Toast>\n    );\n    if (registerError === 'Error: Error 409: Conflict' || registerError === 'Error: Error 409: ') {\n        registerErrorText = (\n            <Toast onClose={() => setToast(false)} show={toast} delay={5000} autohide>\n                <Toast.Header>\n                    <img src=\"logo-20x20.png\" className=\"rounded me-2\" alt=\"PLANSE\" />\n                    <strong className=\"me-auto\">Register Error</strong>\n                </Toast.Header>\n                <Toast.Body>This email is already registered.</Toast.Body>\n            </Toast>\n        );\n    }\n\n    return (\n        <div>\n            <ToastContainer position=\"bottom-end\" className=\"p-3\">\n                {registerError ? registerErrorText : ''}\n            </ToastContainer>\n\n            <Form className=\"formCard register\" onSubmit={submit}>\n                <p className=\"text-center\">\n                    <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                </p>\n\n                <h1 className=\"h3 mb-3 fw-normal text-center\">Register on PLANSE</h1>\n\n                <p className=\"text-center\">\n                    <Link to=\"/login\">Login instead</Link>\n                </p>\n\n                <Form.Floating controlid=\"formName\">\n                    <Form.Control type=\"text\" className=\"top\" placeholder=\"Ed Baldwin\" onChange={e => setName(e.target.value)} required />\n                    <Form.Label>Name</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formEmail\">\n                    <Form.Control type=\"email\" className=\"middle\" placeholder=\"name@example.com\" onChange={e => setEmail(e.target.value)} required />\n                    <Form.Label>Email address</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formPassword\">\n                    <Form.Control type=\"password\" className=\"bottom\" placeholder=\"password\" onChange={e => setPassword(e.target.value)} required />\n                    <Form.Label>Password</Form.Label>\n                </Form.Floating>\n\n                <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100\">Register <BoxArrowRight /></Button>\n\n                <p className=\"mt-3 mb-3 text-muted text-center\">You will be redirected to the login page.<br />Email verification doesn't needed.<br />We'll never share your email with anyone else</p>\n\n                <p className=\"mt-5 mb-3 text-muted text-center\">&copy; PLANSE, 2021</p>\n            </Form>\n        </div>\n    );\n};\n\nexport default Register;\n","import React, { useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { BoxArrowRight } from 'react-bootstrap-icons';\nimport { Redirect } from 'react-router-dom';\n\n\nconst Logout = (props) => {\n    const [logoutRedirect, setLogoutRedirect] = useState(false);\n\n    const submit = async (e) => {\n        e.preventDefault();\n\n        await fetch(process.env.REACT_APP_DOMAIN + '/api/logout', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({})\n        });\n\n        setLogoutRedirect(true);\n        props.setUser([]);\n    }\n\n    if (logoutRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <Form className=\"formCard\" onSubmit={submit}>\n            <p className=\"text-center\">\n                <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n            </p>\n\n            <h1 className=\"h3 mb-3 fw-normal text-center\">{props.user.name}, do you really want to log out?</h1>\n\n            <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100\">Log out <BoxArrowRight /></Button>\n\n            <p className=\"mt-5 mb-3 text-muted text-center\">&copy; PLANSE, 2021</p>\n        </Form>\n    );\n};\n\nexport default Logout;\n","import React from 'react';\nimport { CheckSquareFill, Gear, Square, Star } from 'react-bootstrap-icons';\nimport { Link } from 'react-router-dom';\n\n\nexport const CalendarEntry = (props) => {\n    let setVisibleCalendar = (id) => {\n        const visible = props.calendar.visible === 1 ? 0 : 1;\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/edit/' + id, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                visible\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                props.fetchCalendars();\n            })\n            .catch(error => {\n                alert(error);\n                props.fetchCalendars();\n            });\n    }\n\n    let mainCalendarText = (\n        <span></span>\n    );\n\n    if (props.user.main_calendar === props.calendar.id) {\n        mainCalendarText = (\n            <span className=\"text-secondary\" title=\"This is your main calendar\">\n                <Star />\n            </span>\n        );\n    }\n\n    return (\n        <div className=\"d-flex calendar-entry\">\n            <p className=\"mt-0 mb-0 flex-fill\">\n                <span className={\"calendar-color-\" + props.calendar.color} title=\"Show or hide this calendar\">\n                    <Link to=\"#\" className=\"color-inherit\" onClick={() => setVisibleCalendar(props.calendar.id)}>{props.calendar.visible === 1 ? <CheckSquareFill /> : <Square />}</Link> {props.calendar.name}\n                </span>\n            </p>\n\n            <p className=\"mt-0 mb-0\">\n                <span className=\"pr-3\">{mainCalendarText} </span>\n                <span>\n                    <Link to={\"/calendar/edit/\" + props.calendar.id} className=\"text-decoration-none text-secondary\" title=\"Edit this calendar\">\n                        <Gear />\n                    </Link>\n                </span>\n            </p>\n        </div>\n    );\n};\n\nexport default CalendarEntry;\n\n\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nimport { CalendarEntry } from './CalendarEntry';\n\nexport const CalendarList = (props) => {\n\n    if (props.userLoaded === false) {\n        return (\n            <div>\n\n            </div>\n        );\n    }\n    else {\n        if (props.calendarsLoaded !== true) {\n            return (\n                <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n            );\n        }\n        else {\n            let calendarsList = props.calendars.map((calendar) => {\n                return <CalendarEntry key={calendar.id} calendar={calendar} user={props.user} fetchCalendars={props.fetchCalendars} />\n            })\n\n            return (\n                <div>\n                    {calendarsList}\n                </div>\n            );\n        }\n    }\n};\n\nexport default CalendarList;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\n\nimport { Link } from 'react-router-dom';\n\n\nexport const Welcome = () => {\n    return (\n        <div>\n            <Form className=\"formCard\">\n                <p className=\"text-center\">\n                    <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                </p>\n\n                <h1 className=\"h3 mb-3 fw-normal text-center\">Welcome to PLANSE</h1>\n\n                <p className=\"text-center\">Online calendar application.</p>\n\n                <Link to=\"/login\" className=\"w-100 btn btn-lg btn-primary\">Log in</Link>\n                <Link to=\"/register\" className=\"w-100 btn btn-lg btn-outline-primary mt-3\">Register</Link>\n\n                <p className=\"mt-5 mb-3 text-muted text-center\">&copy; PLANSE, 2021</p>\n            </Form>\n        </div>\n    );\n};\n\nexport default Welcome;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\n\n\nexport const EventsTypeSelector = (props) => {\n    let changeShowAllDayEvents = () => {\n        props.setShowAllDayEvents(!props.showAllDayEvents);\n        props.updateEvents();\n    }\n\n    let changeShowTimeSpecificEvents = () => {\n        props.setShowTimeSpecificEvents(!props.showTimeSpecificEvents);\n        props.updateEvents();\n    }\n\n    let changeShowArrangements = () => {\n        props.setShowArrangements(!props.showArrangements);\n        props.updateEvents();\n    }\n\n    let changeShowReminders = () => {\n        props.setShowReminders(!props.showReminders);\n        props.updateEvents();\n    }\n\n    let changeShowTasks = () => {\n        props.setShowTasks(!props.showTasks);\n        props.updateEvents();\n    }\n\n    return (\n        <div>\n            <div className=\"d-flex calendar-entry\">\n                <p className=\"mt-0 mb-0 flex-fill text-muted\">\n                    All day events\n                </p>\n\n                <Form className=\"mt-0 mb-0\">\n                    <Form.Check type=\"switch\" id=\"showAllDayEvents\" aria-label=\"All day events\" defaultChecked={props.showAllDayEvents} onChange={() => changeShowAllDayEvents()} />\n                </Form>\n            </div>\n\n            <div className=\"d-flex calendar-entry\">\n                <p className=\"mt-0 mb-0 flex-fill text-muted\">\n                    Time-specific events\n                </p>\n\n                <Form className=\"mt-0 mb-0\">\n                    <Form.Check type=\"switch\" id=\"showTimeSpecificEvents\" aria-label=\"Time-specific events\" defaultChecked={props.showTimeSpecificEvents} onChange={() => changeShowTimeSpecificEvents()} />\n                </Form>\n            </div>\n\n            <div className=\"d-flex calendar-entry\">\n                <p className=\"mt-0 mb-0 flex-fill text-muted\">\n                    Arrangements\n                </p>\n\n                <Form className=\"mt-0 mb-0\">\n                    <Form.Check type=\"switch\" id=\"showArrangements\" aria-label=\"Arrangements\" defaultChecked={props.showArrangements} onChange={() => changeShowArrangements()} />\n                </Form>\n            </div>\n\n            <div className=\"d-flex calendar-entry\">\n                <p className=\"mt-0 mb-0 flex-fill text-muted\">\n                    Reminders\n                </p>\n\n                <Form className=\"mt-0 mb-0\">\n                    <Form.Check type=\"switch\" id=\"showReminders\" aria-label=\"Reminders\" defaultChecked={props.showReminders} onChange={() => changeShowReminders()} />\n                </Form>\n            </div>\n\n            <div className=\"d-flex calendar-entry\">\n                <p className=\"mt-0 mb-0 flex-fill text-muted\">\n                    Tasks\n                </p>\n\n                <Form className=\"mt-0 mb-0\">\n                    <Form.Check type=\"switch\" id=\"showTasks\" aria-label=\"Tasks\" defaultChecked={props.showTasks} onChange={() => changeShowTasks()} />\n                </Form>\n            </div>\n        </div>\n    );\n};\n\nexport default EventsTypeSelector;\n\n\n","import React, { useState } from 'react';\n\nimport { Redirect } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\n\nimport { CalendarList } from '../leftBar/CalendarList';\nimport { Welcome } from '../account/Welcome';\nimport { Calendar3, CalendarPlus, PlusCircleDotted } from 'react-bootstrap-icons';\nimport { Spinner } from 'react-bootstrap';\nimport EventsTypeSelector from './EventsTypeSelector';\n\n\nexport const LeftBar = (props) => {\n    const [redirectToLogin] = useState(false);\n\n    if (redirectToLogin) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    if (props.userLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        if (props.user.length === 0) {\n            return (\n                <Welcome />\n            );\n        }\n        else {\n            return (\n                <div className=\"left-bar\">\n                    <h5 className=\"calendar-entry\"><Calendar3 /> PLANSE</h5>\n\n                    <div className=\"d-flex calendar-entry\">\n                        <h6 className=\"text-muted flex-fill\">Your calendars</h6>\n\n                        <h6><Link to=\"calendar/create\" className=\"text-secondary\" title=\"Create calendar\"><CalendarPlus /></Link></h6>\n                    </div>\n\n\n                    <CalendarList user={props.user} userLoaded={props.userLoaded} calendars={props.calendars} calendarsLoaded={props.calendarsLoaded} fetchCalendars={props.fetchCalendars} />\n\n                    <div className=\"d-flex calendar-entry mt-5\">\n                        <h6 className=\"text-muted flex-fill\">Events</h6>\n                    </div>\n\n                    <EventsTypeSelector showAllDayEvents={props.showAllDayEvents} setShowAllDayEvents={props.setShowAllDayEvents} showTimeSpecificEvents={props.showTimeSpecificEvents} setShowTimeSpecificEvents={props.setShowTimeSpecificEvents} updateEvents={props.updateEvents} showArrangements={props.showArrangements} showReminders={props.showReminders} showTasks={props.showTasks} setShowArrangements={props.setShowArrangements} setShowReminders={props.setShowReminders} setShowTasks={props.setShowTasks} />\n\n                    <p className=\"mt-3\">\n                        <Link to=\"/event/create\" className=\"btn btn-primary w-100\"><PlusCircleDotted /> Create event</Link>\n                    </p>\n                </div>\n            );\n        }\n    }\n};\n\nexport default LeftBar;\n","import React from 'react';\n\nimport { Link } from \"react-router-dom\";\n\nimport moment from 'moment';\nimport { Button, ButtonGroup, Spinner } from 'react-bootstrap';\nimport { ChevronCompactRight, ChevronLeft, ChevronRight } from 'react-bootstrap-icons';\nimport { useMediaQuery } from 'react-responsive';\n\n\nexport const TopNav = (props) => {\n    const isMobile = useMediaQuery({ query: `(max-width: 1350px)` });\n    const isScreenSmall = useMediaQuery({ query: `(max-width: 1000px)` });\n\n    if (props.userLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let todayButton = (<div></div>);\n        let currentDateClassName = \"currentDate col \";\n        if ((props.view === \"month\" && moment(props.viewDate).format('MM YYYY') !== moment().format('MM YYYY')) || (props.view === \"year\" && moment(props.viewDate).format('YYYY') !== moment().format('YYYY')) || (props.view === \"agenda\" && moment(props.viewDate).format('DD MM YYYY') !== moment().format('DD MM YYYY'))) {\n            todayButton = (\n                <ButtonGroup size=\"sm\" aria-label=\"View\" className=\"goToToday\">\n                    <Button variant=\"outline-primary\" onClick={() => props.setViewDate(moment())}> {isMobile ? 'TOD' : 'Today'} </Button>\n                </ButtonGroup>\n            );\n\n            currentDateClassName += \" notToday\";\n        }\n\n        const viewButtons = (\n            <div className=\"selectView\">\n                <ButtonGroup size=\"sm\" aria-label=\"View\" className=\"viewButtons\">\n                    <Button variant={props.view === 'agenda' ? 'primary' : 'outline-primary'} onClick={() => props.setView(\"agenda\")}> {isMobile ? 'A' : 'Agenda'} </Button>\n                    <Button variant={props.view === 'month' ? 'primary' : 'outline-primary'} onClick={() => props.setView(\"month\")}> {isMobile ? 'M' : 'Month'} </Button>\n                    <Button variant={props.view === 'year' ? 'primary' : 'outline-primary'} onClick={() => props.setView(\"year\")}> {isMobile ? 'Y' : 'Year'} </Button>\n                </ButtonGroup>\n\n                {todayButton}\n            </div>\n        );\n\n        const username = (\n            <div className=\"account\">\n                <p className=\"text-end\">\n                    <Link to=\"/logout\" className=\"text-decoration-none\"> {isMobile ? props.user.name.match(/\\b(\\w)/g).join('') : props.user.name} <ChevronCompactRight /></Link>\n                </p>\n            </div>\n        );\n\n        let viewAdjust = \"days\";\n        let displayDate = \"MMM D\";\n        let displayDateLight = \"YYYY\";\n\n        if (props.view === \"month\") {\n            viewAdjust = \"months\";\n            displayDate = \"MMMM\";\n            displayDateLight = \"YYYY\";\n\n            if (isMobile) {\n                displayDate = \"MMM\";\n                displayDateLight = \"YY\";\n            }\n        }\n        else if (props.view === \"year\") {\n            viewAdjust = \"years\";\n            displayDate = \"YYYY\";\n            displayDateLight = false;\n        }\n\n        let topNavClass = \"\"\n        if (isScreenSmall) {\n            topNavClass = \"warn\";\n        }\n\n        return (\n            <div className={\"top-nav container \" + topNavClass}>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {viewButtons}\n                    </div>\n\n                    <div className={currentDateClassName}>\n                        <div>\n                            <h3 className=\"text-center\">\n                                <span className=\"chevron\" onClick={() => props.setViewDate(moment(props.viewDate).subtract(1, viewAdjust))}><ChevronLeft /></span>\n\n                                <span>{moment(props.viewDate).format(displayDate)} </span>\n\n                                {displayDateLight === false ? \"\" : <span className=\"fw-lighter\">{moment(props.viewDate).format(displayDateLight)}</span>}\n\n                                <span className=\"chevron\" onClick={() => props.setViewDate(moment(props.viewDate).add(1, viewAdjust))}><ChevronRight /></span>\n                            </h3>\n                        </div>\n                    </div>\n\n                    <div className=\"col\">\n                        {username}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default TopNav;\n","import React from 'react';\n\nimport moment from 'moment';\n\nimport { ArrowRightShort, Bell, Sticky, StickyFill } from 'react-bootstrap-icons';\nimport { Spinner } from 'react-bootstrap';\n\n\nexport const AgendaStack = (props) => {\n    if (props.userLoaded === false || props.userLoaded === false || props.calendarsLoaded === false || props.eventsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let dayDate = moment(props.viewDate);\n        let events = [];\n\n        props.events.forEach((event) => {\n            let visible = props.calendars.filter((calendar) => calendar.id === event.calendar_id)[0].visible;\n            if (visible === 0) {\n                return;\n            }\n\n            let color = event.color;\n            if (parseInt(color) === 0) {\n                props.calendars.forEach((calendar) => {\n                    if (calendar.id === event.calendar_id) {\n                        color = calendar.color;\n                    }\n                });\n            }\n\n            if (event.type === \"arrangement\" && props.showArrangements === true) {\n                let start = moment(event.start);\n                let end = moment(event.end);\n\n                if (event.all_day === 1 || end.diff(start, \"days\") > 0) {\n                    color = \"calendar-color-\" + color + \" calendar-background-color-\" + color;\n                }\n                else {\n                    color = \"calendar-color-\" + color;\n                }\n\n                if (dayDate.isBetween(start, end, 'days', '[]') === true) {\n                    if (event.all_day === 0 && props.showTimeSpecificEvents === true) {\n                        // Events with start or end time\n                        if (start.format(\"DD-MM-YYYY\") === end.format(\"DD-MM-YYYY\")) {\n                            // Single day events\n                            let startText = start.format(\"mm\") === \"00\" ? start.format(\"HH\") : start.format(\"HH:mm\");\n                            let endText = end.format(\"mm\") === \"00\" ? end.format(\"HH\") : end.format(\"HH:mm\");\n\n                            events.push(\n                                <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                    <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                    <p className={\"info arrangement-\" + event.id}>{startText}<ArrowRightShort />{endText}</p>\n                                </div>\n                            );\n                        }\n                        else {\n                            // Multiple day events\n                            if (start.format(\"DD-MM-YYYY\") === dayDate.format(\"DD-MM-YYYY\")) {\n                                // First day\n                                let startText = start.format(\"mm\") === \"00\" ? start.format(\"HH\") : start.format(\"HH:mm\");\n\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                        <p className={\"info arrangement-\" + event.id}>{startText}<ArrowRightShort /></p>\n                                    </div>\n                                );\n                            }\n                            else if (end.format(\"DD-MM-YYYY\") === dayDate.format(\"DD-MM-YYYY\")) {\n                                // Intermediate day\n                                let endText = end.format(\"mm\") === \"00\" ? end.format(\"HH\") : end.format(\"HH:mm\");\n\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                        <p className={\"info arrangement-\" + event.id}><ArrowRightShort />{endText}</p>\n                                    </div>\n                                );\n                            }\n                            else {\n                                // Last day\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                        <p className={\"info arrangement-\" + event.id}><ArrowRightShort /></p>\n                                    </div>\n                                );\n                            }\n                        }\n                    }\n                    else if (event.all_day === 1 && props.showAllDayEvents === true) {\n                        // All day events\n                        if (start.format(\"DD-MM-YYYY\") === end.format(\"DD-MM-YYYY\")) {\n                            // Single day events\n                            events.push(\n                                <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                    <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                </div>\n                            );\n                        }\n                        else {\n                            // Multiple day events\n                            if (end.format(\"DD-MM-YYYY\") === dayDate.format(\"DD-MM-YYYY\")) {\n                                // Last day\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                    </div>\n                                );\n                            }\n                            else {\n                                // First or Intermediate day\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                        <p className={\"info arrangement-\" + event.id}><ArrowRightShort /></p>\n                                    </div>\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n            else if (event.type === \"reminder\" && props.showReminders === true) {\n                let start = moment(event.start);\n\n                if (event.all_day === 1) {\n                    color = \"calendar-color-\" + color + \" calendar-background-color-\" + color;\n                }\n                else {\n                    color = \"calendar-color-\" + color;\n                }\n\n                if (dayDate.isBetween(start, start, 'days', '[]') === true) {\n                    if (event.all_day === 0 && props.showTimeSpecificEvents === true) {\n                        // Events with start or end time\n                        let startText = start.format(\"mm\") === \"00\" ? start.format(\"HH\") : start.format(\"HH:mm\");\n\n                        events.push(\n                            <div className={\"reminder reminder-timeSpecific \" + color + \" reminder-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                <p className={\"name reminder-\" + event.id}><Bell /> {event.name}</p>\n                                <p className={\"info reminder-\" + event.id}>{startText}</p>\n                            </div>\n                        );\n                    }\n                    else if (event.all_day === 1 && props.showAllDayEvents === true) {\n                        // All day events\n                        events.push(\n                            <div className={\"reminder reminder-timeSpecific \" + color + \" reminder-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                <p className={\"name reminder-\" + event.id}><Bell /> {event.name}</p>\n                            </div>\n                        );\n                    }\n                }\n            }\n            else if (event.type === \"task\" && props.showTasks === true) {\n                let start = moment(event.start);\n\n                let is_done = \"\";\n                let icon = (\n                    <StickyFill />\n                );\n                if (event.is_done === 1) {\n                    color = \"calendar-color-\" + color;\n                    is_done = \"task-done\";\n                    icon = (\n                        <Sticky />\n                    );\n                }\n                else {\n                    color = \"calendar-color-\" + color + \" calendar-background-color-\" + color;\n                }\n\n                if (dayDate.isBetween(start, start, 'days', '[]') === true) {\n                    if (props.showAllDayEvents === true) {\n                        events.push(\n                            <div className={\"task task-timeSpecific \" + color + \" task-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                <p className={\"name task-\" + event.id + \" \" + is_done}>{icon} {event.name}</p>\n                            </div>\n                        );\n                    }\n                }\n            }\n        });\n\n        return (\n            <div>\n                {events}\n            </div>\n        );\n    }\n};\n\nexport default AgendaStack;\n","import React from 'react';\n\nimport moment from 'moment';\n\nimport { Spinner } from 'react-bootstrap';\nimport AgendaStack from './AgendaStack';\n\n\nexport const AgendaView = (props) => {\n    if (props.userLoaded === false || props.userLoaded === false || props.calendarsLoaded === false || props.eventsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let date = props.viewDate;\n        let firstDay = parseInt(moment(date).startOf('month').format(\"d\"), 10);\n        let lastDay = parseInt(moment(date).endOf('month').format(\"D\"), 10);\n\n        let month = []\n        for (let i = 0; i < 6; i++) {\n            let week = []\n            for (let i = 0; i < 7; i++) {\n                week.push(i)\n            }\n            month.push(week)\n        }\n\n        let miniCalendar = (\n            <div className=\"miniCalendar\">\n                <p className=\"text-center pb-2 name\" onClick={() => { goToMonth() }}>{moment(date).format(\"MMMM\")}</p>\n\n                {month.map((week, index) => {\n                    return (\n                        <div className=\"d-flex week\">\n                            {week.map((day) => {\n                                let dayDate = index * 7 + day - firstDay + 1;\n                                if (dayDate >= 0) {\n                                    dayDate += 1;\n                                }\n\n                                return (\n                                    <p className={\"day text-center fw-light \" + (parseInt(day, 10) >= 5 ? \"text-muted \" : \"\") + ((dayDate > 0 && dayDate <= lastDay) ? \"realDate \" : \"\")} onClick={() => { goToDay(dayDate) }}>{(dayDate > 0 && dayDate <= lastDay) ? dayDate : ''}</p>\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n\n        let goToMonth = () => {\n            props.setView(\"month\");\n        }\n\n        let goToDay = (d) => {\n            if (d > 0 && d <= lastDay) {\n                props.setViewDate(moment(d + \" \" + moment(date).format(\"MM YYYY\"), \"D MM YYYY\"));\n            }\n        }\n\n        return (\n            <div className=\"d-flex viewAgenda\">\n                <div className=\"left\">\n                    <div className=\"date\">\n                        <p className=\"lead day\">{moment(date).format(\"D\")}</p>\n                        <p className=\"lead date\">{moment(date).format(\"dddd, MMMM DD, YYYY\")}</p>\n                    </div>\n\n                    {miniCalendar}\n                </div>\n\n                <div className=\"right\">\n                    <AgendaStack events={props.events} eventsLoaded={props.eventsLoaded} calendars={props.calendars} calendarsLoaded={props.calendarsLoaded} showEventModal={props.showEventModal} setShowEventModal={props.setShowEventModal} showAllDayEvents={props.showAllDayEvents} showTimeSpecificEvents={props.showTimeSpecificEvents} showArrangements={props.showArrangements} showReminders={props.showReminders} showTasks={props.showTasks} viewDate={date} />\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default AgendaView;\n","import React from 'react';\n\nimport moment from 'moment';\nimport { ArrowRightShort, Bell, Sticky, StickyFill } from 'react-bootstrap-icons';\nimport { Spinner } from 'react-bootstrap';\n\nimport { useMediaQuery } from 'react-responsive';\n\n\nexport const Day = (props) => {\n    const isMobile = useMediaQuery({ query: `(max-width: 1350px)` });\n\n    if (props.userLoaded === false || props.calendarsLoaded === false || props.eventsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let dayDate = props.dayDate;\n\n        let cn = \"dayNum mt-0 mb-0\"\n        if (dayDate.format(\"MM\") !== props.viewDate.format(\"MM\")) {\n            cn = \"dayNum text-secondary\"\n        }\n\n        let events = []\n\n        props.events.forEach((event) => {\n            let visible = props.calendars.filter((calendar) => calendar.id === event.calendar_id)[0].visible;\n            if (visible === 0) {\n                return; \n            }\n\n            let color = event.color;\n            if (parseInt(color) === 0) {\n                props.calendars.forEach((calendar) => {\n                    if (calendar.id === event.calendar_id) {\n                        color = calendar.color;\n                    }\n                });\n            }\n\n            if (event.type === \"arrangement\" && props.showArrangements === true) {\n                let start = moment(event.start);\n                let end = moment(event.end);\n\n                if (event.all_day === 1 || end.diff(start, \"days\") > 0) {\n                    color = \"calendar-color-\" + color + \" calendar-background-color-\" + color;\n                }\n                else {\n                    color = \"calendar-color-\" + color;\n                }\n\n                if (dayDate.isBetween(start, end, 'days', '[]') === true) {\n                    if (event.all_day === 0 && props.showTimeSpecificEvents === true) {\n                        // Events with start or end time\n                        if (start.format(\"DD-MM-YYYY\") === end.format(\"DD-MM-YYYY\")) {\n                            // Single day events\n                            let startText = start.format(\"mm\") === \"00\" ? start.format(\"HH\") : start.format(\"HH:mm\");\n                            let endText = end.format(\"mm\") === \"00\" ? end.format(\"HH\") : end.format(\"HH:mm\");\n\n                            events.push(\n                                <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                    <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                    <p className={\"info arrangement-\" + event.id}>{startText}<ArrowRightShort />{endText}</p>\n                                </div>\n                            );\n                        }\n                        else {\n                            // Multiple day events\n                            if (start.format(\"DD-MM-YYYY\") === dayDate.format(\"DD-MM-YYYY\")) {\n                                // First day\n                                let startText = start.format(\"mm\") === \"00\" ? start.format(\"HH\") : start.format(\"HH:mm\");\n\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                        <p className={\"info arrangement-\" + event.id}>{startText}<ArrowRightShort /></p>\n                                    </div>\n                                );\n                            }\n                            else if (end.format(\"DD-MM-YYYY\") === dayDate.format(\"DD-MM-YYYY\")) {\n                                // Intermediate day\n                                let endText = end.format(\"mm\") === \"00\" ? end.format(\"HH\") : end.format(\"HH:mm\");\n\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                        <p className={\"info arrangement-\" + event.id}><ArrowRightShort />{endText}</p>\n                                    </div>\n                                );\n                            }\n                            else {\n                                // Last day\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                        <p className={\"info arrangement-\" + event.id}><ArrowRightShort /></p>\n                                    </div>\n                                );\n                            }\n                        }\n                    }\n                    else if (event.all_day === 1 && props.showAllDayEvents === true) {\n                        // All day events\n                        if (start.format(\"DD-MM-YYYY\") === end.format(\"DD-MM-YYYY\")) {\n                            // Single day events\n                            events.push(\n                                <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                    <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                </div>\n                            );\n                        }\n                        else {\n                            // Multiple day events\n                            if (end.format(\"DD-MM-YYYY\") === dayDate.format(\"DD-MM-YYYY\")) {\n                                // Last day\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                    </div>\n                                );\n                            }\n                            else {\n                                // First or Intermediate day\n                                events.push(\n                                    <div className={\"arrangement arrangement-timeSpecific \" + color + \" arrangement-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                        <p className={\"name arrangement-\" + event.id}>{event.name}</p>\n                                        <p className={\"info arrangement-\" + event.id}><ArrowRightShort /></p>\n                                    </div>\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n            else if (event.type === \"reminder\" && props.showReminders === true) {\n                let start = moment(event.start);\n\n                if (event.all_day === 1) {\n                    color = \"calendar-color-\" + color + \" calendar-background-color-\" + color;\n                }\n                else {\n                    color = \"calendar-color-\" + color;\n                }\n\n                if (dayDate.isBetween(start, start, 'days', '[]') === true) {\n                    if (event.all_day === 0 && props.showTimeSpecificEvents === true) {\n                        // Events with start or end time\n                        let startText = start.format(\"mm\") === \"00\" ? start.format(\"HH\") : start.format(\"HH:mm\");\n\n                        events.push(\n                            <div className={\"reminder reminder-timeSpecific \" + color + \" reminder-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                <p className={\"name reminder-\" + event.id}><Bell /> {event.name}</p>\n                                <p className={\"info reminder-\" + event.id}>{startText}</p>\n                            </div>\n                        );\n                    }\n                    else if (event.all_day === 1 && props.showAllDayEvents === true) {\n                        // All day events\n                        events.push(\n                            <div className={\"reminder reminder-timeSpecific \" + color + \" reminder-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                <p className={\"name reminder-\" + event.id}><Bell /> {event.name}</p>\n                            </div>\n                        );\n                    }\n                }\n            }\n            else if (event.type === \"task\" && props.showTasks === true) {\n                let start = moment(event.start);\n\n                let is_done = \"\";\n                let icon = (\n                    <StickyFill />\n                );\n                if (event.is_done === 1) {\n                    color = \"calendar-color-\" + color;\n                    is_done = \"task-done\";\n                    icon = (\n                        <Sticky />\n                    );\n                }\n                else {\n                    color = \"calendar-color-\" + color + \" calendar-background-color-\" + color;\n                }\n\n                if (dayDate.isBetween(start, start, 'days', '[]') === true) {\n                    if (props.showAllDayEvents === true) {\n                        events.push(\n                            <div className={\"task task-timeSpecific \" + color + \" task-\" + event.id} key={event.id} onClick={(e) => { props.setShowEventModal(e) }}>\n                                <p className={\"name task-\" + event.id + \" \" + is_done}>{icon} {event.name}</p>\n                            </div>\n                        );\n                    }\n                }\n            }\n        });\n\n        return (\n            <div>\n                <p className={cn + \" \" + props.today + \" day-\" + dayDate.format(\"DD-MM-YYYY\")}>{dayDate.format('D')} {(props.today === \"\" || isMobile) ? \"\" : \" — Today\"}</p>\n\n                <div>\n                    {events}\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Day;\n","import React from 'react';\n\nimport moment from 'moment';\nimport { Spinner } from 'react-bootstrap';\nimport { Day } from '../month/Day';\n\n\nexport const Week = (props) => {\n    if (props.userLoaded === false || props.calendarsLoaded === false || props.eventsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        return (\n            <>\n                {props.week.map((day) => {\n                    const week = parseInt(props.index, 10);\n                    const firstDay = props.firstDay;\n                    const firstDayDate = parseInt(props.firstDayDate, 10);\n\n                    let dayDate = moment(firstDay).add(day - firstDayDate + week * 7, \"days\");\n\n                    let today = \"\";\n                    if (dayDate.format(\"DD MM YYYY\") === moment().format(\"DD MM YYYY\")) {\n                        today = \"today\"\n                    }\n\n                    return (\n                        <div className={\"day day-\" + dayDate.format(\"DD-MM-YYYY\") + \" \" + today} key={day} onClick={(e) => { props.setShowEventModal(e) }}>\n                            <Day day={day} key={day} dayDate={dayDate} today={today} viewDate={props.viewDate} calendars={props.calendars} calendarsLoaded={props.calendarsLoaded} eventsLoaded={props.eventsLoaded} events={props.events} showEventModal={props.showEventModal} setShowEventModal={props.setShowEventModal} showAllDayEvents={props.showAllDayEvents} showTimeSpecificEvents={props.showTimeSpecificEvents} showArrangements={props.showArrangements} showReminders={props.showReminders} showTasks={props.showTasks} />\n                        </div>\n                    )\n                })}\n            </>\n        );\n    }\n};\n\nexport default Week;\n","import React from 'react';\n\nimport moment from 'moment';\n\nimport { Week } from '../month/Week';\nimport { Spinner } from 'react-bootstrap';\n\n\nexport const MonthView = (props) => {\n    if (props.userLoaded === false || props.userLoaded === false || props.calendarsLoaded === false || props.eventsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        const firstDay = moment(\"01 \" + moment(props.viewDate).format('MM') + moment(props.viewDate).format('YYYY'), \"DD MM YYYY\");\n        let firstDayDate = moment(firstDay).format('d') - 1;\n\n        if (firstDayDate === -1) {\n            firstDayDate = 6;\n        }\n\n        let weeks = []\n        for (let i = 0; i <= 5; i++) {\n            let arr = [];\n\n            for (let j = 0; j <= 6; j++) {\n                arr.push(j.toString());\n            }\n\n            weeks.push(arr);\n        }\n\n        let weeksJS = weeks.map((week, index) => {\n            return (\n                <div className=\"week d-flex\" key={index} style={{zIndex: index}}>\n                    <Week className=\"week d-flex\" week={week} index={index} key={index} firstDay={firstDay} firstDayDate={firstDayDate} viewDate={props.viewDate} calendars={props.calendars} calendarsLoaded={props.calendarsLoaded} eventsLoaded={props.eventsLoaded} events={props.events} showEventModal={props.showEventModal} setShowEventModal={props.setShowEventModal} showAllDayEvents={props.showAllDayEvents} showTimeSpecificEvents={props.showTimeSpecificEvents} showArrangements={props.showArrangements} showReminders={props.showReminders} showTasks={props.showTasks}/>\n                </div>\n            );\n        });\n\n        return (\n            <div className=\"viewMonth\">\n                <div className=\"daysOfWeek d-flex\">\n                    <div className=\"day\">\n                        <p>Mon</p>\n                    </div>\n\n                    <div className=\"day\">\n                        <p>Tue</p>\n                    </div>\n\n                    <div className=\"day\">\n                        <p>Wed</p>\n                    </div>\n\n                    <div className=\"day\">\n                        <p>Thu</p>\n                    </div>\n\n                    <div className=\"day\">\n                        <p>Fri</p>\n                    </div>\n\n                    <div className=\"day\">\n                        <p>Sat</p>\n                    </div>\n\n                    <div className=\"day\">\n                        <p>Sun</p>\n                    </div>\n                </div>\n\n                {weeksJS}\n            </div>\n        );\n    }\n};\n\nexport default MonthView;\n","import React from 'react';\n\nimport moment from 'moment';\n\nimport { Spinner } from 'react-bootstrap';\n\n\nexport const Month = (props) => {\n    if (props.userLoaded === false || props.calendarsLoaded === false || props.eventsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let date = moment(props.index * 4 + parseInt(props.month, 10) + 1 + \" \" + moment(props.viewDate).format(\"YYYY\"), \"MM YYYY\");\n        let lastDay = moment(date).endOf('month').format(\"D\");\n\n        let weeks = []\n        for (let i = 0; i <= 5; i++) {\n            let arr = [];\n\n            for (let j = 0; j <= 6; j++) {\n                arr.push(j.toString());\n            }\n\n            weeks.push(arr);\n        }\n\n        let weeksJS = weeks.map((week, index) => {\n            let w = week.map((day, i) => {\n                let dayDate = index * 7 + parseInt(day, 10) + 1 - parseInt(date.format(\"d\"), 10) + 1;\n\n                return (\n                    <p className={\"day text-center fw-light \" + (parseInt(day, 10) >= 5 ? \"text-muted\" : \"\")}>{ (dayDate > 0 && dayDate <= lastDay) ? dayDate : ''}</p>\n                );\n            });\n\n            return (\n                <div className=\"week d-flex\">\n                    {w}\n                </div>\n            );\n        });\n\n        let clickMonth = () => {\n            props.setView(\"month\");\n            props.setViewDate(date);\n        }\n\n        return (\n            <div style={{zIndex: props.index + 1}}>\n                <p className=\"text-center pb-2 name\" onClick={()=> {clickMonth()}}>{date.format(\"MMMM\")}</p>\n                {weeksJS}\n            </div>\n        );\n    }\n};\n\nexport default Month;\n","import React from 'react';\n\nimport { Spinner } from 'react-bootstrap';\nimport { Month } from '../year/Month';\n\n\nexport const YearRow = (props) => {\n    if (props.userLoaded === false || props.calendarsLoaded === false || props.eventsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        return (\n            <>\n                {props.row.map((month) => {\n                    return (\n                        <div className=\"month\">\n                            <Month className=\"month\" index={props.index} month={month} view={props.view} setView={props.setView} viewDate={props.viewDate} setViewDate={props.setViewDate} />\n                        </div>\n                    )\n                })}\n            </>\n        );\n    }\n};\n\nexport default YearRow;\n","import React from 'react';\n\nimport { YearRow } from '../year/YearRow';\nimport { Spinner } from 'react-bootstrap';\n\n\nexport const YearView = (props) => {\n    if (props.userLoaded === false || props.userLoaded === false || props.calendarsLoaded === false || props.eventsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let months = []\n        for (let i = 0; i < 3; i++) {\n            let arr = [];\n\n            for (let j = 0; j < 4; j++) {\n                arr.push(j.toString());\n            }\n\n            months.push(arr);\n        }\n\n        let monthsJS = months.map((row, index) => {\n            return (\n                <div className=\"yearRow d-flex\">\n                    <YearRow className=\"yearRow d-flex\" row={row} index={index} key={index} view={props.view} setView={props.setView} viewDate={props.viewDate} setViewDate={props.setViewDate} />\n                </div>\n            );\n        });\n\n        return (\n            <div className=\"viewYear\">\n                {monthsJS}\n            </div>\n        );\n    }\n};\n\nexport default YearView;\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nimport { AgendaView } from '../calendar/agenda/AgendaView';\nimport { MonthView } from '../calendar/month/MonthView';\nimport { YearView } from '../calendar/year/YearView';\n\n\nexport const CalendarBody = (props) => {\n    if (props.userLoaded === false || props.calendarsLoaded !== true) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        if (props.view === 'agenda') {\n            return (\n                <AgendaView user={props.user} events={props.events} eventsLoaded={props.eventsLoaded} calendars={props.calendars} calendarsLoaded={props.calendarsLoaded} showEventModal={props.showEventModal} setShowEventModal={props.setShowEventModal} showAllDayEvents={props.showAllDayEvents} showTimeSpecificEvents={props.showTimeSpecificEvents} showArrangements={props.showArrangements} showReminders={props.showReminders} showTasks={props.showTasks} view={props.view} setView={props.setView} viewDate={props.viewDate} setViewDate={props.setViewDate} />\n            );\n        }\n        else if (props.view === 'month') {\n            return (\n                <MonthView user={props.user} viewDate={props.viewDate} events={props.events} eventsLoaded={props.eventsLoaded} calendars={props.calendars} calendarsLoaded={props.calendarsLoaded} showEventModal={props.showEventModal} setShowEventModal={props.setShowEventModal} showAllDayEvents={props.showAllDayEvents} showTimeSpecificEvents={props.showTimeSpecificEvents} showArrangements={props.showArrangements} showReminders={props.showReminders} showTasks={props.showTasks} />\n            );\n        }\n        else if (props.view === 'year') {\n            return (\n                <YearView user={props.user} events={props.events} eventsLoaded={props.eventsLoaded} calendars={props.calendars} calendarsLoaded={props.calendarsLoaded} showEventModal={props.showEventModal} setShowEventModal={props.setShowEventModal} showAllDayEvents={props.showAllDayEvents} showTimeSpecificEvents={props.showTimeSpecificEvents} showArrangements={props.showArrangements} showReminders={props.showReminders} showTasks={props.showTasks} view={props.view} setView={props.setView} viewDate={props.viewDate} setViewDate={props.setViewDate} />\n            );\n        }\n    }\n};\n\nexport default CalendarBody;\n","import moment from 'moment';\nimport React from 'react';\n\nimport { Modal } from 'react-bootstrap';\nimport { Button, Form } from 'react-bootstrap';\nimport { Bell, CalendarEvent, ChevronLeft, Sticky } from 'react-bootstrap-icons';\n\n\nexport const CreateEvent = (props) => {\n    const setDate = () => {\n        props.setShowEventModal(false);\n        props.setCalendarSelectedDate(moment(props.event.split('day-')[1].split(' ')[0], \"DD-MM-YYYY\"));\n    }\n\n    return (\n        <Modal show={true} onHide={() => props.setShowEventModal(false)}>\n            <Modal.Header closeButton>\n                <Modal.Title></Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form className=\"formCard\">\n                    <p className=\"text-center\">\n                        <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                    </p>\n\n                    <h1 className=\"h3 mb-3 fw-normal text-center\">Create event</h1>\n\n                    <Button variant=\"primary\" size=\"lg\" className=\"w-100 mt-3\" onClick={() => { props.setShowArrangementModal(true); setDate() }}><CalendarEvent /> Arrangement</Button>\n\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"w-100 mt-3\" onClick={() => { props.setShowReminderModal(true); setDate() }}><Bell /> Reminder</Button>\n\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"w-100 mt-3\" onClick={() => { props.setShowTaskModal(true); setDate() }}><Sticky /> Task</Button>\n                    \n                    <Button variant=\"outline-secondary\" className=\"w-100 mt-3\" onClick={() => props.setShowEventModal(false)}><ChevronLeft />Go back to Calendar</Button>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default CreateEvent;\n","import React, { useEffect, useState } from 'react';\n\nimport moment from 'moment';\nimport { Modal } from 'react-bootstrap';\nimport { Button, ButtonGroup, Form, Spinner } from 'react-bootstrap';\nimport { ChevronLeft, PlusCircleDotted } from 'react-bootstrap-icons';\n\n\nexport const CreateArrangement = (props) => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [calendarSelectedDate] = useState(props.calendarSelectedDate === false ? moment() : props.calendarSelectedDate);\n\n    const [startDate, setStartDate] = useState(calendarSelectedDate.format(\"YYYY-MM-DD\"));\n    const [endDate, setEndDate] = useState((moment().add(1, \"hours\").format(\"HH\") >= 22 || moment().format(\"DD\") !== moment().add(1, \"hours\").format(\"DD\")) && calendarSelectedDate !== false ? calendarSelectedDate.add(1, \"days\").format(\"YYYY-MM-DD\") : calendarSelectedDate.format(\"YYYY-MM-DD\"));\n    const [allDay, setAllDay] = useState(true);\n    const [startTime, setStartTime] = useState(moment().add(1, \"hours\").format(\"HH\") + \":00\");\n    const [endTime, setEndTime] = useState(moment().add(2, \"hours\").format(\"HH\") + \":00\");\n\n    const [calendar, setCalendar] = useState(props.user.main_calendar);\n    const [color, setColor] = useState('');\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const arrangementCreate = (e) => {\n        e.preventDefault();\n\n        const all_day = allDay;\n        const calendar_id = calendar;\n\n        let start = startDate + \" \" + startTime + \":00\";\n        let end = endDate + \" \" + endTime + \":00\";\n\n        if (all_day === true) {\n            start = startDate + \" 00:00:00\";\n            end = endDate + \" 00:00:00\";\n\n            if (moment(endDate).isBefore(moment(startDate))) {\n                alert(\"Start date should be before end date.\");\n                return;\n            }\n        }\n        else {\n            if (moment(endDate + \" \" + endTime).isBefore(moment(startDate + \" \" + startTime))) {\n                alert(\"Start date should be before end date.\");\n                return;\n            }\n        }\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/arrangement/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                end,\n                all_day,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                props.setShowArrangementModal(false);\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n                props.setShowArrangementModal(false);\n            });\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        let selectAllDay = (\n            <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                    <Button variant=\"primary\" className=\"w-100 active\" onClick={() => setAllDay(true)}>All day</Button>\n                    <Button variant=\"primary\" className=\"w-100\" onClick={() => setAllDay(false)}>Selected time</Button>\n                </ButtonGroup>\n            </Form.Floating>\n        );\n\n        if (allDay === false) {\n            selectAllDay = (\n                <div>\n                    <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                        <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                            <Button variant=\"primary\" className=\"w-100\" onClick={() => setAllDay(true)}>All day</Button>\n                            <Button variant=\"primary\" className=\"w-100 active\" onClick={() => setAllDay(false)}>Selected time</Button>\n                        </ButtonGroup>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formStartTime\" className=\"mt-3\">\n                        <Form.Control type=\"time\" className=\"top\" placeholder=\"Start Time *\" onChange={e => setStartTime(e.target.value)} defaultValue={startTime} required />\n                        <Form.Label>Start Time *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formEndTime\">\n                        <Form.Control type=\"time\" className=\"bottom\" placeholder=\"End Time *\" onChange={e => setEndTime(e.target.value)} defaultValue={endTime} required />\n                        <Form.Label>End Time *</Form.Label>\n                    </Form.Floating>\n                </div>\n            );\n        }\n\n        return (\n            <Modal show={true} onHide={() => props.setShowArrangementModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Create arrangement</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={arrangementCreate}>\n                        <Form.Floating controlid=\"formName\">\n                            <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} required />\n                            <Form.Label>Name *</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formDescription\">\n                            <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} />\n                            <Form.Label>Description</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                            <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                            <Form.Label>Start Date *</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formEndDate\">\n                            <Form.Control type=\"date\" className=\"bottom\" placeholder=\"End Date *\" onChange={e => setEndDate(e.target.value)} defaultValue={endDate} required />\n                            <Form.Label>End Date *</Form.Label>\n                        </Form.Floating>\n\n                        {selectAllDay}\n\n                        <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                            <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={props.user.main_calendar} >\n                                {calendarsList}\n                            </Form.Select>\n                            <Form.Label>Calendar *</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formColor\">\n                            <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue=\"\" >\n                                <option value=\"0\">Color of calendar</option>\n                                <option value=\"1\">&#x1F33A; Red</option>\n                                <option value=\"2\">&#x1F3C0; Orange</option>\n                                <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                                <option value=\"4\">&#x1F966; Green</option>\n                                <option value=\"5\">&#x1F40B; Blue</option>\n                                <option value=\"6\">&#x1F47E; Purple</option>\n                            </Form.Select>\n                            <Form.Label>Color *</Form.Label>\n                        </Form.Floating>\n\n                        <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100 mt-3\"><PlusCircleDotted /> Create arrangement</Button>\n                        <Button variant=\"outline-secondary\" className=\"w-100 mt-3\" onClick={() => props.setShowArrangementModal(false)}><ChevronLeft />Go back to Calendar</Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n};\n\nexport default CreateArrangement;\n","import React, { useEffect, useState } from 'react';\n\nimport moment from 'moment';\nimport { Modal } from 'react-bootstrap';\nimport { Button, ButtonGroup, Form, Spinner } from 'react-bootstrap';\nimport { ChevronLeft, PlusCircleDotted } from 'react-bootstrap-icons';\n\n\nexport const CreateReminder = (props) => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [calendarSelectedDate] = useState(props.calendarSelectedDate === false ? moment() : props.calendarSelectedDate);\n\n    const [startDate, setStartDate] = useState(calendarSelectedDate.format(\"YYYY-MM-DD\"));\n    const [allDay, setAllDay] = useState(true);\n    const [startTime, setStartTime] = useState(moment().add(1, \"hours\").format(\"HH\") + \":00\");\n\n    const [calendar, setCalendar] = useState(props.user.main_calendar);\n    const [color, setColor] = useState('');\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const reminderCreate = (e) => {\n        e.preventDefault();\n\n        const all_day = allDay;\n        const calendar_id = calendar;\n\n        let start = startDate + \" \" + startTime + \":00\";\n\n        if (all_day === true) {\n            start = startDate + \" 00:00:00\";\n        }\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/reminder/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                all_day,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                props.setShowReminderModal(false);\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n                props.setShowReminderModal(false);\n            });\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        let selectAllDay = (\n            <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                    <Button variant=\"primary\" className=\"w-100 active\" onClick={() => setAllDay(true)}>All day</Button>\n                    <Button variant=\"primary\" className=\"w-100\" onClick={() => setAllDay(false)}>Selected time</Button>\n                </ButtonGroup>\n            </Form.Floating>\n        );\n\n        if (allDay === false) {\n            selectAllDay = (\n                <div>\n                    <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                        <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                            <Button variant=\"primary\" className=\"w-100\" onClick={() => setAllDay(true)}>All day</Button>\n                            <Button variant=\"primary\" className=\"w-100 active\" onClick={() => setAllDay(false)}>Selected time</Button>\n                        </ButtonGroup>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formStartTime\" className=\"mt-3\">\n                        <Form.Control type=\"time\" className=\"top\" placeholder=\"Start Time *\" onChange={e => setStartTime(e.target.value)} defaultValue={startTime} required />\n                        <Form.Label>Time *</Form.Label>\n                    </Form.Floating>\n                </div>\n            );\n        }\n\n        return (\n            <Modal show={true} onHide={() => props.setShowReminderModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Create reminder</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={reminderCreate}>\n                        <Form.Floating controlid=\"formName\">\n                            <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} required />\n                            <Form.Label>Name *</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formDescription\">\n                            <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} />\n                            <Form.Label>Description</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                            <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                            <Form.Label>Date *</Form.Label>\n                        </Form.Floating>\n\n                        {selectAllDay}\n\n                        <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                            <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={props.user.main_calendar} >\n                                {calendarsList}\n                            </Form.Select>\n                            <Form.Label>Calendar *</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formColor\">\n                            <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue=\"\" >\n                                <option value=\"0\">Color of calendar</option>\n                                <option value=\"1\">&#x1F33A; Red</option>\n                                <option value=\"2\">&#x1F3C0; Orange</option>\n                                <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                                <option value=\"4\">&#x1F966; Green</option>\n                                <option value=\"5\">&#x1F40B; Blue</option>\n                                <option value=\"6\">&#x1F47E; Purple</option>\n                            </Form.Select>\n                            <Form.Label>Color *</Form.Label>\n                        </Form.Floating>\n\n                        <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100 mt-3\"><PlusCircleDotted /> Create reminder</Button>\n                        <Button variant=\"outline-secondary\" className=\"w-100 mt-3\" onClick={() => props.setShowReminderModal(false)}><ChevronLeft />Go back to Calendar</Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n};\n\nexport default CreateReminder;\n","import React, { useEffect, useState } from 'react';\n\nimport moment from 'moment';\nimport { Modal } from 'react-bootstrap';\nimport { Button, Form, Spinner } from 'react-bootstrap';\nimport { ChevronLeft, PlusCircleDotted } from 'react-bootstrap-icons';\n\n\nexport const CreateTask = (props) => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [calendarSelectedDate] = useState(props.calendarSelectedDate === false ? moment() : props.calendarSelectedDate);\n\n    const [startDate, setStartDate] = useState(calendarSelectedDate.format(\"YYYY-MM-DD\"));\n    const [isDone] = useState(false);\n\n    const [calendar, setCalendar] = useState(props.user.main_calendar);\n    const [color, setColor] = useState('');\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const taskCreate = (e) => {\n        e.preventDefault();\n\n        const is_done = isDone;\n        const calendar_id = calendar;\n\n        let start = startDate + \" 00:00:00\";\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/task/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                is_done,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                props.setShowTaskModal(false);\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n                props.setShowTaskModal(false);\n            });\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        return (\n            <Modal show={true} onHide={() => props.setShowTaskModal(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Create task</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={taskCreate}>\n                        <Form.Floating controlid=\"formName\">\n                            <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} required />\n                            <Form.Label>Name *</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formDescription\">\n                            <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} />\n                            <Form.Label>Description</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                            <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                            <Form.Label>Date *</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                            <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={props.user.main_calendar} >\n                                {calendarsList}\n                            </Form.Select>\n                            <Form.Label>Calendar *</Form.Label>\n                        </Form.Floating>\n\n                        <Form.Floating controlid=\"formColor\">\n                            <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue=\"\" >\n                                <option value=\"0\">Color of calendar</option>\n                                <option value=\"1\">&#x1F33A; Red</option>\n                                <option value=\"2\">&#x1F3C0; Orange</option>\n                                <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                                <option value=\"4\">&#x1F966; Green</option>\n                                <option value=\"5\">&#x1F40B; Blue</option>\n                                <option value=\"6\">&#x1F47E; Purple</option>\n                            </Form.Select>\n                            <Form.Label>Color *</Form.Label>\n                        </Form.Floating>\n\n                        <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100 mt-3\"><PlusCircleDotted /> Create task</Button>\n                        <Button variant=\"outline-secondary\" className=\"w-100 mt-3\" onClick={() => props.setShowTaskModal(false)}><ChevronLeft />Go back to Calendar</Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n};\n\nexport default CreateTask;\n","import moment from 'moment';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Button, ButtonGroup, Form, Modal, Spinner } from 'react-bootstrap';\nimport { Save, Trash, XCircle } from 'react-bootstrap-icons';\n\n\nexport const ArrangementDetails = (props) => {\n    const [eventLoaded, setEventLoaded] = useState(false);\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [startDate, setStartDate] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [allDay, setAllDay] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endTime, setEndTime] = useState('');\n\n    const [calendar, setCalendar] = useState('');\n    const [color, setColor] = useState('');\n\n    const fetchArrangement = useCallback(() => {\n        setEventLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/arrangement/' + props.arrangement, {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setEventLoaded(true);\n\n                setName(response.name);\n                setDescription(response.description);\n\n                setAllDay(response.all_day === 1 ? true : false);\n\n                setStartDate(response.start.split(' ')[0]);\n                setStartTime(response.start.split(' ')[1]);\n\n                setEndDate(response.end.split(' ')[0]);\n                setEndTime(response.end.split(' ')[1]);\n\n                setCalendar(response.calendar_id);\n                setColor(response.color);\n            })\n            .catch(error => {\n                // alert(error);\n            });\n    }, [props.arrangement]);\n\n    const fetchCalendars = useCallback(() => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                // alert(error);\n            });\n    }, []);\n\n    useEffect(() => {\n        props.setShowArrangementDetailsModal(true);\n\n        fetchArrangement();\n        fetchCalendars();\n    }, [props, fetchArrangement, fetchCalendars]);\n\n    const arrangementEdit = (e) => {\n        e.preventDefault();\n\n        const all_day = allDay;\n        const calendar_id = calendar;\n\n        let start = startDate + \" \" + startTime + \":00\";\n        let end = endDate + \" \" + endTime + \":00\";\n\n        if (all_day === true) {\n            start = startDate + \" 00:00:00\";\n            end = endDate + \" 00:00:00\";\n\n            if (moment(endDate).isBefore(moment(startDate))) {\n                alert(\"Start date should be before end date.\");\n                return;\n            }\n        }\n        else {\n            if (moment(endDate + \" \" + endTime).isBefore(moment(startDate + \" \" + startTime))) {\n                alert(\"Start date should be before end date.\");\n                return;\n            }\n        }\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/arrangement/edit/' + props.arrangement, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                end,\n                all_day,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                hideModal();\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    const deleteArrangement = () => {\n        fetch(process.env.REACT_APP_DOMAIN + '/api/arrangement/delete/' + props.arrangement, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                hideModal();\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    let hideModal = () => {\n        props.setShowArrangementDetailsModal(false);\n        props.setShowEventModal(false);\n    }\n\n    let title = (\n        <p>Loading...</p>\n    );\n\n    let content = (\n        <div className=\"text-center mt-5 mb-5\">\n            <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </Spinner>\n        </div>\n    );\n\n    let calendarsList = (\n        <span></span>\n    );\n\n    let selectAllDay = (\n        <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n            <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                <Button variant=\"primary\" className={allDay === true ? 'w-100 active' : 'w-100'} onClick={() => setAllDay(true)}>All day</Button>\n                <Button variant=\"primary\" className={allDay === false ? 'w-100 active' : 'w-100'} onClick={() => setAllDay(false)}>Selected time</Button>\n            </ButtonGroup>\n        </Form.Floating>\n    );\n\n    if (allDay === false) {\n        selectAllDay = (\n            <div>\n                <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                    <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                        <Button variant=\"primary\" className={allDay === true ? 'w-100 active' : 'w-100'} onClick={() => setAllDay(true)}>All day</Button>\n                        <Button variant=\"primary\" className={allDay === false ? 'w-100 active' : 'w-100'} onClick={() => setAllDay(false)}>Selected time</Button>\n                    </ButtonGroup>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formStartTime\" className=\"mt-3\">\n                    <Form.Control type=\"time\" className=\"top\" placeholder=\"Start Time *\" onChange={e => setStartTime(e.target.value)} defaultValue={startTime} required />\n                    <Form.Label>Start Time *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formEndTime\">\n                    <Form.Control type=\"time\" className=\"bottom\" placeholder=\"End Time *\" onChange={e => setEndTime(e.target.value)} defaultValue={endTime} required />\n                    <Form.Label>End Time *</Form.Label>\n                </Form.Floating>\n            </div>\n        );\n    }\n\n    if (eventLoaded === true && calendarsLoaded === true) {\n        calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        title = (\n            <p>{name}</p>\n        );\n\n        content = (\n            <div>\n                <Form onSubmit={arrangementEdit}>\n                    <Form.Floating controlid=\"formName\">\n                        <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} defaultValue={name} required />\n                        <Form.Label>Name *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formDescription\">\n                        <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} defaultValue={description} />\n                        <Form.Label>Description</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                        <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                        <Form.Label>Start Date *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formEndDate\">\n                        <Form.Control type=\"date\" className=\"bottom\" placeholder=\"End Date *\" onChange={e => setEndDate(e.target.value)} defaultValue={endDate} required />\n                        <Form.Label>End Date *</Form.Label>\n                    </Form.Floating>\n\n                    {selectAllDay}\n\n                    <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                        <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={calendar} >\n                            {calendarsList}\n                        </Form.Select>\n                        <Form.Label>Calendar *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formColor\">\n                        <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue={color} >\n                            <option value=\"0\">Color of calendar</option>\n                            <option value=\"1\">&#x1F33A; Red</option>\n                            <option value=\"2\">&#x1F3C0; Orange</option>\n                            <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                            <option value=\"4\">&#x1F966; Green</option>\n                            <option value=\"5\">&#x1F40B; Blue</option>\n                            <option value=\"6\">&#x1F47E; Purple</option>\n                        </Form.Select>\n                        <Form.Label>Color *</Form.Label>\n                    </Form.Floating>\n\n                    <div className=\"d-flex justify-content-between mt-3\">\n                        <Button variant=\"outline-danger\" onClick={() => deleteArrangement()}><Trash /> Delete</Button>\n\n                        <div className=\"btn-group\">\n                            <Button variant=\"outline-secondary\" onClick={() => hideModal()}><XCircle /> Close</Button>\n                            <Button variant=\"primary\" type=\"submit\"><Save /> Save</Button>\n                        </div>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n\n    return (\n        <Modal show={props.showArrangementDetailsModal} onHide={() => hideModal()}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {content}\n            </Modal.Body>\n        </Modal>\n    );\n}\n\nexport default ArrangementDetails;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Button, ButtonGroup, Form, Modal, Spinner } from 'react-bootstrap';\nimport { Save, Trash, XCircle } from 'react-bootstrap-icons';\n\n\nexport const ReminderDetails = (props) => {\n    const [eventLoaded, setEventLoaded] = useState(false);\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [startDate, setStartDate] = useState('');\n    const [allDay, setAllDay] = useState('');\n    const [startTime, setStartTime] = useState('');\n\n    const [calendar, setCalendar] = useState('');\n    const [color, setColor] = useState('');\n\n    const fetchReminder = useCallback(() => {\n        setEventLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/reminder/' + props.reminder, {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setEventLoaded(true);\n\n                setName(response.name);\n                setDescription(response.description);\n\n                setAllDay(response.all_day === 1 ? true : false);\n\n                setStartDate(response.start.split(' ')[0]);\n                setStartTime(response.start.split(' ')[1]);\n\n                setCalendar(response.calendar_id);\n                setColor(response.color);\n            })\n            .catch(error => {\n                // alert(error);\n            });\n    }, [props.reminder]);\n\n    const fetchCalendars = useCallback(() => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                // alert(error);\n            });\n    }, []);\n\n    useEffect(() => {\n        props.setShowReminderDetailsModal(true);\n\n        fetchReminder();\n        fetchCalendars();\n    }, [props, fetchReminder, fetchCalendars]);\n\n    const reminderEdit = (e) => {\n        e.preventDefault();\n\n        const all_day = allDay;\n        const calendar_id = calendar;\n\n        let start = startDate + \" \" + startTime + \":00\";\n\n        if (all_day === true) {\n            start = startDate + \" 00:00:00\";\n        }\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/reminder/edit/' + props.reminder, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                all_day,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                hideModal();\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    const deleteReminder = () => {\n        fetch(process.env.REACT_APP_DOMAIN + '/api/reminder/delete/' + props.reminder, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                hideModal();\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    let hideModal = () => {\n        props.setShowReminderDetailsModal(false);\n        props.setShowEventModal(false);\n    }\n\n    let title = (\n        <p>Loading...</p>\n    );\n\n    let content = (\n        <div className=\"text-center mt-5 mb-5\">\n            <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </Spinner>\n        </div>\n    );\n\n    let calendarsList = (\n        <span></span>\n    );\n\n    let selectAllDay = (\n        <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n            <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                <Button variant=\"primary\" className={allDay === true ? 'w-100 active' : 'w-100'} onClick={() => setAllDay(true)}>All day</Button>\n                <Button variant=\"primary\" className={allDay === false ? 'w-100 active' : 'w-100'} onClick={() => setAllDay(false)}>Selected time</Button>\n            </ButtonGroup>\n        </Form.Floating>\n    );\n\n    if (allDay === false) {\n        selectAllDay = (\n            <div>\n                <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                    <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                        <Button variant=\"primary\" className={allDay === true ? 'w-100 active' : 'w-100'} onClick={() => setAllDay(true)}>All day</Button>\n                        <Button variant=\"primary\" className={allDay === false ? 'w-100 active' : 'w-100'} onClick={() => setAllDay(false)}>Selected time</Button>\n                    </ButtonGroup>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formStartTime\" className=\"mt-3\">\n                    <Form.Control type=\"time\" className=\"top\" placeholder=\"Start Time *\" onChange={e => setStartTime(e.target.value)} defaultValue={startTime} required />\n                    <Form.Label>Time *</Form.Label>\n                </Form.Floating>\n            </div>\n        );\n    }\n\n    if (eventLoaded === true && calendarsLoaded === true) {\n        calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        title = (\n            <p>{name}</p>\n        );\n\n        content = (\n            <div>\n                <Form onSubmit={reminderEdit}>\n                    <Form.Floating controlid=\"formName\">\n                        <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} defaultValue={name} required />\n                        <Form.Label>Name *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formDescription\">\n                        <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} defaultValue={description} />\n                        <Form.Label>Description</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                        <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                        <Form.Label>Date *</Form.Label>\n                    </Form.Floating>\n\n                    {selectAllDay}\n\n                    <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                        <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={calendar} >\n                            {calendarsList}\n                        </Form.Select>\n                        <Form.Label>Calendar *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formColor\">\n                        <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue={color} >\n                            <option value=\"0\">Color of calendar</option>\n                            <option value=\"1\">&#x1F33A; Red</option>\n                            <option value=\"2\">&#x1F3C0; Orange</option>\n                            <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                            <option value=\"4\">&#x1F966; Green</option>\n                            <option value=\"5\">&#x1F40B; Blue</option>\n                            <option value=\"6\">&#x1F47E; Purple</option>\n                        </Form.Select>\n                        <Form.Label>Color *</Form.Label>\n                    </Form.Floating>\n\n                    <div className=\"d-flex justify-content-between mt-3\">\n                        <Button variant=\"outline-danger\" onClick={() => deleteReminder()}><Trash /> Delete</Button>\n\n                        <div className=\"btn-group\">\n                            <Button variant=\"outline-secondary\" onClick={() => hideModal()}><XCircle /> Close</Button>\n                            <Button variant=\"primary\" type=\"submit\"><Save /> Save</Button>\n                        </div>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n\n    return (\n        <Modal show={props.showReminderDetailsModal} onHide={() => hideModal()}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {content}\n            </Modal.Body>\n        </Modal>\n    );\n}\n\nexport default ReminderDetails;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Button, Form, Modal, Spinner } from 'react-bootstrap';\nimport { CheckSquare, Save, Square, Trash, XCircle } from 'react-bootstrap-icons';\n\n\nexport const TaskDetails = (props) => {\n    const [eventLoaded, setEventLoaded] = useState(false);\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [startDate, setStartDate] = useState('');\n    const [isDone, setIsDone] = useState('');\n\n    const [calendar, setCalendar] = useState('');\n    const [color, setColor] = useState('');\n\n    const fetchTask = useCallback(() => {\n        setEventLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/task/' + props.task, {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setEventLoaded(true);\n\n                setName(response.name);\n                setDescription(response.description);\n\n                setIsDone(response.is_done === 1 ? true : false);\n\n                setStartDate(response.start.split(' ')[0]);\n\n                setCalendar(response.calendar_id);\n                setColor(response.color);\n            })\n            .catch(error => {\n                // alert(error);\n            });\n    }, [props.task]);\n\n    const fetchCalendars = useCallback(() => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                // alert(error);\n            });\n    }, []);\n\n    useEffect(() => {\n        props.setShowTaskDetailsModal(true);\n\n        fetchTask();\n        fetchCalendars();\n    }, [props, fetchTask, fetchCalendars]);\n\n    const taskEdit = (e) => {\n        e.preventDefault();\n\n        const is_done = isDone;\n        const calendar_id = calendar;\n\n        let start = startDate + \" 00:00:00\";\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/task/edit/' + props.task, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                is_done,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                hideModal();\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    const deleteTask = () => {\n        fetch(process.env.REACT_APP_DOMAIN + '/api/task/delete/' + props.task, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                hideModal();\n                props.updateEvents();\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    let hideModal = () => {\n        props.setShowTaskDetailsModal(false);\n        props.setShowEventModal(false);\n    }\n\n    let title = (\n        <p>Loading...</p>\n    );\n\n    let content = (\n        <div className=\"text-center mt-5 mb-5\">\n            <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </Spinner>\n        </div>\n    );\n\n    let calendarsList = (\n        <span></span>\n    );\n\n    if (eventLoaded === true && calendarsLoaded === true) {\n        calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        title = (\n            <p><Square /> {name}</p>\n        );\n        let doneButton = (\n            <Button variant=\"success\" onClick={() => setIsDone(!isDone)} type=\"submit\"><CheckSquare /> Done</Button>\n        );\n\n        if (isDone === true) {\n            title = (\n                <p><CheckSquare /> <del>{name}</del></p>\n            );\n\n            doneButton = (\n                <Button variant=\"warning\" onClick={() => setIsDone(!isDone)} type=\"submit\"><Square /> Undone</Button>\n            );\n        }\n\n        content = (\n            <div>\n                <Form onSubmit={taskEdit}>\n                    <Form.Floating controlid=\"formName\">\n                        <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} defaultValue={name} required />\n                        <Form.Label>Name *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formDescription\">\n                        <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} defaultValue={description} />\n                        <Form.Label>Description</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                        <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                        <Form.Label>Date *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                        <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={calendar} >\n                            {calendarsList}\n                        </Form.Select>\n                        <Form.Label>Calendar *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formColor\">\n                        <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue={color} >\n                            <option value=\"0\">Color of calendar</option>\n                            <option value=\"1\">&#x1F33A; Red</option>\n                            <option value=\"2\">&#x1F3C0; Orange</option>\n                            <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                            <option value=\"4\">&#x1F966; Green</option>\n                            <option value=\"5\">&#x1F40B; Blue</option>\n                            <option value=\"6\">&#x1F47E; Purple</option>\n                        </Form.Select>\n                        <Form.Label>Color *</Form.Label>\n                    </Form.Floating>\n\n                    <div className=\"d-flex justify-content-between mt-3\">\n                        <Button variant=\"outline-danger\" onClick={() => deleteTask()}><Trash /> Delete</Button>\n\n                        <div className=\"btn-group\">\n                            <Button variant=\"outline-secondary\" onClick={() => hideModal()}><XCircle /> Close</Button>\n                            <Button variant=\"outline-primary\" type=\"submit\"><Save /> Save</Button>\n\n                            {doneButton}\n                        </div>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n\n    return (\n        <Modal show={props.showTaskDetailsModal} onHide={() => hideModal()}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {content}\n            </Modal.Body>\n        </Modal>\n    );\n}\n\nexport default TaskDetails;\n","import React, { useState } from 'react';\n\nimport { Redirect } from \"react-router-dom\";\n\nimport moment from 'moment';\n\nimport { TopNav } from '../calendar/TopNav';\nimport { CalendarBody } from '../calendar/CalendarBody';\nimport { Welcome } from '../account/Welcome';\nimport { Spinner } from 'react-bootstrap';\n\nimport CreateEvent from './modal/CreateEvent';\nimport CreateArrangement from './modal/CreateArrangement';\nimport CreateReminder from './modal/CreateReminder';\nimport CreateTask from './modal/CreateTask';\n\nimport ArrangementDetails from './modal/ArrangementDetails';\nimport ReminderDetails from './modal/ReminderDetails';\nimport TaskDetails from './modal/TaskDetails';\n\n\nexport const Calendar = (props) => {\n    const [redirectToLogin] = useState(false);\n    const [view, setView] = useState('month');\n    const [viewDate, setViewDate] = useState(moment());\n\n    const [calendarSelectedDate, setCalendarSelectedDate] = useState(false);\n    \n    const [showEventModal, setShowEventModal] = useState(false);\n    const [showArrangementModal, setShowArrangementModal] = useState(false);\n    const [showReminderModal, setShowReminderModal] = useState(false);\n    const [showTaskModal, setShowTaskModal] = useState(false);\n\n    const [showArrangementDetailsModal, setShowArrangementDetailsModal] = useState(false);\n    const [showReminderDetailsModal, setShowReminderDetailsModal] = useState(false);\n    const [showTaskDetailsModal, setShowTaskDetailsModal] = useState(false);\n\n    let createEvent = (\n        <div></div>\n    );\n    let arrangementDetails = (\n        <div></div>\n    );\n    let reminderDetails = (\n        <div></div>\n    );\n    let taskDetails = (\n        <div></div>\n    );\n\n    if (showEventModal.target) {\n        let event = showEventModal.target.classList.value;\n        if (event.indexOf('day-') > 0) {\n            createEvent = (\n                <CreateEvent setShowEventModal={setShowEventModal} setShowArrangementModal={setShowArrangementModal} setShowReminderModal={setShowReminderModal} setShowTaskModal={setShowTaskModal} event={event} setCalendarSelectedDate={setCalendarSelectedDate} />\n            );\n        }\n        else if (event.indexOf('arrangement-') > 0) {\n            let arrangement = event.split('arrangement-')[1].split(' ')[0];\n\n            if (arrangement !== \"timeSpecific\" && arrangement !== \"allDay\") {\n                arrangementDetails = (\n                    <ArrangementDetails user={props.user} setShowEventModal={setShowEventModal} showArrangementDetailsModal={showArrangementDetailsModal} setShowArrangementDetailsModal={setShowArrangementDetailsModal} updateEvents={props.updateEvents} arrangement={arrangement} />\n                );\n            }\n        }\n        else if (event.indexOf('reminder-') > 0) {\n            let reminder = event.split('reminder-')[1].split(' ')[0];\n\n            if (reminder !== \"timeSpecific\" && reminder !== \"allDay\") {\n                reminderDetails = (\n                    <ReminderDetails user={props.user} setShowEventModal={setShowEventModal} showReminderDetailsModal={showReminderDetailsModal} setShowReminderDetailsModal={setShowReminderDetailsModal} updateEvents={props.updateEvents} reminder={reminder} />\n                );\n            }\n        }\n        else if (event.indexOf('task-') > 0) {\n            let task = event.split('task-')[1].split(' ')[0];\n\n            if (task !== \"timeSpecific\" && task !== \"allDay\") {\n                taskDetails = (\n                    <TaskDetails user={props.user} setShowEventModal={setShowEventModal} showTaskDetailsModal={showTaskDetailsModal} setShowTaskDetailsModal={setShowTaskDetailsModal} updateEvents={props.updateEvents} task={task} />\n                );\n            }\n        }\n    }\n\n    let createArrangement = (\n        <div></div>\n    );\n    if (showArrangementModal === true) {\n        createArrangement = (\n            <CreateArrangement showArrangementModal={showArrangementModal} setShowArrangementModal={setShowArrangementModal} user={props.user} userLoaded={props.userLoaded} calendarSelectedDate={calendarSelectedDate} updateEvents={props.updateEvents} />\n        );\n    }\n\n    let createReminder = (\n        <div></div>\n    );\n    if (showReminderModal === true) {\n        createReminder = (\n            <CreateReminder showReminderModal={showReminderModal} setShowReminderModal={setShowReminderModal} user={props.user} userLoaded={props.userLoaded} calendarSelectedDate={calendarSelectedDate} updateEvents={props.updateEvents} />\n        );\n    }\n\n    let createTask = (\n        <div></div>\n    );\n    if (showTaskModal === true) {\n        createTask = (\n            <CreateTask showTaskModal={showTaskModal} setShowTaskModal={setShowTaskModal} user={props.user} userLoaded={props.userLoaded} calendarSelectedDate={calendarSelectedDate} updateEvents={props.updateEvents} />\n        );\n    }\n\n    if (redirectToLogin) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    if (props.userLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n\n        if (props.user.length === 0) {\n            return (\n                <Welcome />\n            );\n        }\n        else {\n            return (\n                <div className=\"calendar\">\n                    {createEvent}\n                    {createArrangement}\n                    {createReminder}\n                    {createTask}\n\n                    {arrangementDetails}\n                    {reminderDetails}\n                    {taskDetails}\n\n                    <TopNav user={props.user} userLoaded={props.userLoaded} view={view} setView={setView} viewDate={viewDate} setViewDate={setViewDate} />\n\n                    <CalendarBody user={props.user} userLoaded={props.userLoaded} view={view} setView={setView} viewDate={viewDate} setViewDate={setViewDate} calendars={props.calendars} calendarsLoaded={props.calendarsLoaded} showEventModal={showEventModal} setShowEventModal={setShowEventModal} events={props.events} eventsLoaded={props.eventsLoaded} showAllDayEvents={props.showAllDayEvents} showTimeSpecificEvents={props.showTimeSpecificEvents} showArrangements={props.showArrangements} showReminders={props.showReminders} showTasks={props.showTasks} />\n                </div>\n            );\n        }\n    }\n};\n\nexport default Calendar;\n","import React from 'react';\n\n\nexport const ScreenSmall = () => {\n    return (\n        <div className=\"px-4 py-5 my-5 text-center\">\n            <img className=\"mx-auto mb-4\" src=\"logo.png\" alt=\"Desktop Computer\" width=\"72\" height=\"72\" />\n            <img className=\"mx-auto mb-4\" src=\"img/desktop-computer.png\" alt=\"Desktop Computer\" width=\"72\" height=\"72\" />\n\n            <h1 className=\"display-6 fw-bold\">PLANSE Can't Work On This Screen</h1>\n            <p className=\"lead mb-4\">Please resize the window to make it wider. If the window is full screen, use another larger screen device such as a desktop computer.</p>\n        </div>\n    );\n};\n\nexport default ScreenSmall;\n","import React, { useEffect, useState } from 'react';\n\nimport { useMediaQuery } from 'react-responsive';\nimport { Redirect } from \"react-router-dom\";\n\nimport { LeftBar } from './leftBar/LeftBar';\nimport { Calendar } from './calendar/Calendar';\nimport { Welcome } from './account/Welcome';\nimport { ScreenSmall } from './ScreenSmall';\n\nimport { Spinner } from 'react-bootstrap';\n\n\nconst CalendarMain = (props) => {\n    const [redirectToLogin] = useState(false);\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    const [events, setEvents] = useState([]);\n    const [eventsLoaded, setEventsLoaded] = useState(false);\n\n    const [showAllDayEvents, setShowAllDayEvents] = useState(true);\n    const [showTimeSpecificEvents, setShowTimeSpecificEvents] = useState(true);\n\n    const [showArrangements, setShowArrangements] = useState(true);\n    const [showReminders, setShowReminders] = useState(true);\n    const [showTasks, setShowTasks] = useState(true);\n\n    const isScreenSmall = useMediaQuery({ query: `(max-width: 1000px)` });\n\n    useEffect(() => {\n        fetchCalendars();\n        updateEvents();\n    }, []);\n\n    const fetchCalendars = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                // alert(error);\n            });\n    }\n\n    const updateEvents = () => {\n        setEventsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/events', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setEvents(response);\n                setEventsLoaded(true);\n            })\n            .catch(error => {\n                // alert(error);\n            });\n    }\n\n    if (redirectToLogin) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    if (isScreenSmall === true && process.env.REACT_APP_DOMAIN !== \"http://localhost:8000\") {\n        return (\n            <ScreenSmall />\n        );\n    }\n    else if (props.userLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n\n                <p className=\"text-muted\">First loading may take a while...</p>\n            </div>\n        );\n    }\n    else {\n        if (props.user.length === 0) {\n            return (\n                <Welcome />\n            );\n        }\n        else {\n            return (\n                <div>\n                    <LeftBar user={props.user} setUser={props.setUser} calendars={calendars} calendarsLoaded={calendarsLoaded} updateEvents={updateEvents} showAllDayEvents={showAllDayEvents} setShowAllDayEvents={setShowAllDayEvents} showTimeSpecificEvents={showTimeSpecificEvents} setShowTimeSpecificEvents={setShowTimeSpecificEvents} showArrangements={showArrangements} showReminders={showReminders} showTasks={showTasks} setShowArrangements={setShowArrangements} setShowReminders={setShowReminders} setShowTasks={setShowTasks} />\n\n                    <Calendar user={props.user} setUser={props.setUser} calendars={calendars} calendarsLoaded={calendarsLoaded} showAllDayEvents={showAllDayEvents} showTimeSpecificEvents={showTimeSpecificEvents} updateEvents={updateEvents} events={events} eventsLoaded={eventsLoaded} showArrangements={showArrangements} showReminders={showReminders} showTasks={showTasks} />\n                </div>\n            );\n        }\n    }\n};\n\nexport default CalendarMain;\n","import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { CalendarPlus, ChevronLeft } from 'react-bootstrap-icons';\n\nimport { Link, Redirect } from \"react-router-dom\";\n\n\nconst CalendarCreate = (props) => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const [color, setColor] = useState(0);\n\n    const [createCalendarCreateRedirect, setCalendarCreateRedirect] = useState(false);\n\n    const createCalendar = (e) => {\n        e.preventDefault();\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendarCreateRedirect(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (createCalendarCreateRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <Form className=\"formCard\" onSubmit={createCalendar}>\n            <p className=\"text-center\">\n                <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n            </p>\n\n            <h1 className=\"h3 mb-3 fw-normal text-center\">Create calendar</h1>\n\n            <Form.Floating controlid=\"formName\" className=\"mt-3\">\n                <Form.Control type=\"text\" className=\"top\" placeholder=\"Home\" onChange={e => setName(e.target.value)} required />\n                <Form.Label>Name *</Form.Label>\n            </Form.Floating>\n\n            <Form.Floating controlid=\"formDescription\">\n                <Form.Control type=\"text\" className=\"middle\" placeholder=\"Calendar for home events\" onChange={e => setDescription(e.target.value)} />\n                <Form.Label>Description</Form.Label>\n            </Form.Floating>\n\n            <Form.Floating controlid=\"formColor\">\n                <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue=\"0\" >\n                    <option value=\"1\">&#x1F33A; Red</option>\n                    <option value=\"2\">&#x1F3C0; Orange</option>\n                    <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                    <option value=\"4\">&#x1F966; Green</option>\n                    <option value=\"5\">&#x1F40B; Blue</option>\n                    <option value=\"6\">&#x1F47E; Purple</option>\n                </Form.Select>\n                <Form.Label>Color *</Form.Label>\n            </Form.Floating>\n\n            <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100 mt-3\"><CalendarPlus /> Create calendar</Button>\n            <Link to=\"/\" className=\"btn btn-outline-secondary w-100 mt-3\"><ChevronLeft />Go back to Calendar</Link>\n        </Form>\n    );\n};\n\nexport default CalendarCreate;\n","import React, { useEffect, useState } from 'react';\nimport { Button, Form, Spinner } from 'react-bootstrap';\nimport { ChevronLeft, Save } from 'react-bootstrap-icons';\n\nimport { withRouter } from 'react-router';\nimport { Redirect } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\n\nimport { useHistory } from \"react-router-dom\";\n\n\nconst CalendarEdit = (props) => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const [color, setColor] = useState();\n\n    const [calendarEditRedirect, setCalendarEditRedirect] = useState(false);\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    const history = useHistory();\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const calendarEdit = (e) => {\n        e.preventDefault();\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/edit/' + props.match.params.id, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendarEditRedirect(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarEditRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        const calendarInfo = calendars.filter((calendar) => parseInt(calendar.id, 10) === parseInt(props.match.params.id, 10))[0];\n\n        let calendarControl = (\n            <div className=\"mt-3\">\n                <Link to={{ pathname: \"/calendar/editMain/\" + props.match.params.id, state: { mainName: calendarInfo.name } }} className=\"w-100 btn btn-lg btn-warning\">Make the main calendar</Link>\n\n                <Button variant=\"danger\" size=\"lg\" className=\"w-100 mt-3\" onClick={() => history.push(\"/calendar/delete/\" + props.match.params.id)}>Delete calendar</Button>\n            </div>\n        );\n        if (calendarInfo.id === props.user.main_calendar) {\n            calendarControl = (\n                <div className=\"mt-3\">\n                    <p className=\"text-center\">You can't delete your main calendar</p>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <Form className=\"formCard\" onSubmit={calendarEdit}>\n                    <p className=\"text-center\">\n                        <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                    </p>\n\n                    <h1 className=\"h3 mb-3 fw-normal text-center\">Edit <code>{calendarInfo.name}</code> calendar</h1>\n\n                    <Form.Floating controlid=\"formName\">\n                        <Form.Control type=\"text\" className=\"top\" placeholder=\"Home\" onChange={e => setName(e.target.value)} defaultValue={calendarInfo.name} required />\n                        <Form.Label>Name *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formDescription\">\n                        <Form.Control type=\"text\" className=\"middle\" placeholder=\"Calendar for home events\" defaultValue={calendarInfo.description} onChange={e => setDescription(e.target.value)} />\n                        <Form.Label>Description</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formColor\">\n                        <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue={calendarInfo.color} >\n                            <option value=\"1\">&#x1F33A; Red</option>\n                            <option value=\"2\">&#x1F3C0; Orange</option>\n                            <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                            <option value=\"4\">&#x1F966; Green</option>\n                            <option value=\"5\">&#x1F40B; Blue</option>\n                            <option value=\"6\">&#x1F47E; Purple</option>\n                        </Form.Select>\n                        <Form.Label>Color *</Form.Label>\n                    </Form.Floating>\n\n                    <Button variant=\"primary\" size=\"lg\" className=\"w-100 mt-3\" type=\"submit\"><Save /> Save changes</Button>\n                    \n                    <hr className=\"mt-3\" />\n                    {calendarControl}\n\n                    <hr className=\"mt-3\" />\n                    <Link to=\"/\" className=\"btn btn-outline-secondary w-100\"><ChevronLeft />Go back to Calendar</Link>\n                </Form>\n            </div>\n        );\n    }\n};\n\nexport default withRouter(CalendarEdit);\n","import React, { useEffect, useState } from 'react';\nimport { Button, Form, Spinner } from 'react-bootstrap';\nimport { ChevronLeft, Save } from 'react-bootstrap-icons';\n\nimport { withRouter } from 'react-router';\nimport { Link, Redirect } from \"react-router-dom\";\n\n\nconst CalendarEdit = (props) => {\n    const [calendarUpdateMainRedirect, setCalendarUpdateMainRedirect] = useState(false);\n    const [id] = useState(parseInt(props.match.params.id, 10))\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const calendarUpdateMain = (e) => {\n        e.preventDefault();\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/editMain/' + id, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendarUpdateMainRedirect(true);\n                props.setUser(response);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarUpdateMainRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        const calendarInfo = calendars.filter((calendar) => parseInt(calendar.id, 10) === id)[0];\n\n        return (\n            <Form className=\"formCard\" onSubmit={calendarUpdateMain}>\n                <p className=\"text-center\">\n                    <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                </p>\n\n                <h1 className=\"h3 mb-3 fw-normal text-center\">Update main calendar</h1>\n\n                <p className=\"text-center\">You are going to change your main calendar to the <code>{calendarInfo.name}</code> calendar.</p>\n\n                <Button variant=\"primary\" size=\"lg\" className=\"w-100 mt-3\" type=\"submit\"><Save /> Update main calendar</Button>\n                <Link to=\"/\" className=\"btn btn-outline-secondary w-100 mt-3\"><ChevronLeft />Go back to Calendar</Link>\n            </Form>\n        );\n    }\n};\n\nexport default withRouter(CalendarEdit);\n","import React, { useEffect, useState } from 'react';\nimport { Alert, Button, Form, Spinner } from 'react-bootstrap';\nimport { CalendarX, ChevronLeft } from 'react-bootstrap-icons';\n\nimport { withRouter } from 'react-router';\nimport { Link, Redirect } from \"react-router-dom\";\n\n\nconst CalendarDelete = (props) => {\n    const [calendarDeleteRedirect, setCalendarDeleteRedirect] = useState(false);\n    const [id] = useState(parseInt(props.match.params.id, 10))\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const calendarDelete = (e) => {\n        e.preventDefault();\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/delete/' + id, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendarDeleteRedirect(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarDeleteRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n                setCalendarsLoaded(false);\n            });\n    }\n\n    if (calendarsLoaded !== true) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        const calendarInfo = calendars.filter((calendar) => parseInt(calendar.id, 10) === id)[0];\n\n        let deleteButton = (\n            <div>\n                <Alert key={calendarInfo.id} variant=\"danger\" className=\"text-center mt-3\">This action is irreversible</Alert>\n                <Button variant=\"danger\" size=\"lg\" className=\"w-100 mt-3\" type=\"submit\"><CalendarX /> Delete calendar</Button>\n            </div>\n        );\n\n        if (props.user.main_calendar === calendarInfo.id) {\n            deleteButton = (\n                <Alert key={calendarInfo.id} variant=\"warning\" className=\"text-center\">You can't delete your main calendar</Alert>\n            );\n        }\n\n        return (\n            <Form className=\"formCard\" onSubmit={calendarDelete}>\n                <p className=\"text-center\">\n                    <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                </p>\n\n                <h1 className=\"h3 mb-3 fw-normal text-center\">Delete <code>{calendarInfo.name}</code> calendar</h1>\n\n                <p className=\"text-center\">You are going to delete this calendar.<br />All events in this calendar, as well as access settings will be deleted</p>\n\n                {deleteButton}\n\n                <Link to=\"/\" className=\"btn btn-outline-secondary w-100 mt-3\"><ChevronLeft />Go back to Calendar</Link>\n            </Form>\n        );\n    }\n};\n\nexport default withRouter(CalendarDelete);\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Bell, CalendarEvent, ChevronLeft, Sticky } from 'react-bootstrap-icons';\n\nimport { Link } from 'react-router-dom';\n\n\nconst EventCreate = (props) => {\n    return (\n        <Form className=\"formCard\">\n            <p className=\"text-center\">\n                <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n            </p>\n\n            <h1 className=\"h3 mb-3 fw-normal text-center\">Create event</h1>\n\n            <Link to=\"/arrangement/create\" className=\"w-100 btn btn-lg btn-primary mt-3\"><CalendarEvent /> Arrangement</Link>\n            <Link to=\"/reminder/create\" className=\"w-100 btn btn-lg btn-outline-primary mt-3\"><Bell /> Reminder</Link>\n            <Link to=\"/task/create\" className=\"w-100 btn btn-lg btn-outline-primary mt-3\"><Sticky /> Task</Link>\n            <Link to=\"/\" className=\"btn btn-outline-secondary w-100 mt-3\"><ChevronLeft />Go back to Calendar</Link>\n        </Form>\n    );\n};\n\nexport default EventCreate;\n","import moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Form, Spinner } from 'react-bootstrap';\nimport { ChevronLeft, PlusCircleDotted } from 'react-bootstrap-icons';\n\nimport { Link, Redirect } from \"react-router-dom\";\n\n\nconst ArrangementCreate = (props) => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [startDate, setStartDate] = useState(moment().format(\"YYYY-MM-DD\"));\n    const [endDate, setEndDate] = useState(moment().format(\"YYYY-MM-DD\"));\n    const [allDay, setAllDay] = useState(true);\n    const [startTime, setStartTime] = useState(moment().add(1, \"hours\").format(\"HH\") + \":00\");\n    const [endTime, setEndTime] = useState(moment().add(2, \"hours\").format(\"HH\") + \":00\");\n\n    const [calendar, setCalendar] = useState(props.user.main_calendar);\n    const [color, setColor] = useState('');\n\n    const [arrangementCreateRedirect, setArrangementCreateRedirect] = useState(false);\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n\n        if (moment().add(1, \"hours\").format(\"HH\") >= 22 || moment().format(\"DD\") !== moment().add(1, \"hours\").format(\"DD\")) {\n            setEndDate(moment().add(1, \"days\").format(\"YYYY-MM-DD\"));\n        }\n    }, []);\n\n    const arrangementCreate = (e) => {\n        e.preventDefault();\n\n        const all_day = allDay;\n        const calendar_id = calendar;\n\n        let start = startDate + \" \" + startTime + \":00\";\n        let end = endDate + \" \" + endTime + \":00\";\n\n        if (all_day === true) {\n            start = startDate + \" 00:00:00\";\n            end = endDate + \" 00:00:00\";\n\n            if (moment(endDate).isBefore(moment(startDate))) {\n                alert(\"Start date should be before end date.\");\n                return;\n            }\n        }\n        else {\n            if (moment(endDate + \" \" + endTime).isBefore(moment(startDate + \" \" + startTime))) {\n                alert(\"Start date should be before end date.\");\n                return;\n            }\n        }\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/arrangement/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                end,\n                all_day,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setArrangementCreateRedirect(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (arrangementCreateRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        let selectAllDay = (\n            <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                    <Button variant=\"primary\" className=\"w-100 active\" onClick={() => setAllDay(true)}>All day</Button>\n                    <Button variant=\"primary\" className=\"w-100\" onClick={() => setAllDay(false)}>Selected time</Button>\n                </ButtonGroup>\n            </Form.Floating>\n        );\n\n        if (allDay === false) {\n            selectAllDay = (\n                <div>\n                    <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                        <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                            <Button variant=\"primary\" className=\"w-100\" onClick={() => setAllDay(true)}>All day</Button>\n                            <Button variant=\"primary\" className=\"w-100 active\" onClick={() => setAllDay(false)}>Selected time</Button>\n                        </ButtonGroup>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formStartTime\" className=\"mt-3\">\n                        <Form.Control type=\"time\" className=\"top\" placeholder=\"Start Time *\" onChange={e => setStartTime(e.target.value)} defaultValue={startTime} required />\n                        <Form.Label>Start Time *</Form.Label>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formEndTime\">\n                        <Form.Control type=\"time\" className=\"bottom\" placeholder=\"End Time *\" onChange={e => setEndTime(e.target.value)} defaultValue={endTime} required />\n                        <Form.Label>End Time *</Form.Label>\n                    </Form.Floating>\n                </div>\n            );\n        }\n\n        return (\n            <Form className=\"formCard\" onSubmit={arrangementCreate}>\n                <p className=\"text-center\">\n                    <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                </p>\n\n                <h1 className=\"h3 mb-3 fw-normal text-center\">Create arrangement</h1>\n\n                <Form.Floating controlid=\"formName\">\n                    <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} required />\n                    <Form.Label>Name *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formDescription\">\n                    <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} />\n                    <Form.Label>Description</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                    <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                    <Form.Label>Start Date *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formEndDate\">\n                    <Form.Control type=\"date\" className=\"bottom\" placeholder=\"End Date *\" onChange={e => setEndDate(e.target.value)} defaultValue={endDate} required />\n                    <Form.Label>End Date *</Form.Label>\n                </Form.Floating>\n\n                {selectAllDay}\n\n                <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                    <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={props.user.main_calendar} >\n                        {calendarsList}\n                    </Form.Select>\n                    <Form.Label>Calendar *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formColor\">\n                    <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue=\"\">\n                        <option value=\"0\">Color of calendar</option>\n                        <option value=\"1\">&#x1F33A; Red</option>\n                        <option value=\"2\">&#x1F3C0; Orange</option>\n                        <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                        <option value=\"4\">&#x1F966; Green</option>\n                        <option value=\"5\">&#x1F40B; Blue</option>\n                        <option value=\"6\">&#x1F47E; Purple</option>\n                    </Form.Select>\n                    <Form.Label>Color *</Form.Label>\n                </Form.Floating>\n\n                <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100 mt-3\"><PlusCircleDotted /> Create arrangement</Button>\n                <Link to=\"/\" className=\"btn btn-outline-secondary w-100 mt-3\"><ChevronLeft />Go back to Calendar</Link>\n            </Form>\n        );\n    }\n};\n\nexport default ArrangementCreate;\n","import moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Form, Spinner } from 'react-bootstrap';\nimport { ChevronLeft, PlusCircleDotted } from 'react-bootstrap-icons';\n\nimport { Link, Redirect } from \"react-router-dom\";\n\n\nconst ReminderCreate = (props) => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [startDate, setStartDate] = useState(moment().format(\"YYYY-MM-DD\"));\n    const [allDay, setAllDay] = useState(false);\n    const [startTime, setStartTime] = useState(moment().add(1, \"hours\").format(\"HH\") + \":00\");\n\n    const [calendar, setCalendar] = useState(props.user.main_calendar);\n    const [color, setColor] = useState('');\n\n    const [reminderCreateRedirect, setReminderCreateRedirect] = useState(false);\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const reminderCreate = (e) => {\n        e.preventDefault();\n\n        const all_day = allDay;\n        const calendar_id = calendar;\n\n        let start = startDate + \" \" + startTime + \":00\";\n\n        if (all_day === true) {\n            start = startDate + \" 00:00:00\";\n        }\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/reminder/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                all_day,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setReminderCreateRedirect(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (reminderCreateRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        let selectAllDay = (\n            <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                    <Button variant=\"primary\" className=\"w-100 active\" onClick={() => setAllDay(true)}>All day</Button>\n                    <Button variant=\"primary\" className=\"w-100\" onClick={() => setAllDay(false)}>Selected time</Button>\n                </ButtonGroup>\n            </Form.Floating>\n        );\n\n        if (allDay === false) {\n            selectAllDay = (\n                <div>\n                    <Form.Floating controlid=\"formAllDay\" className=\"mt-3\">\n                        <ButtonGroup aria-label=\"All Day\" className=\"d-flex\">\n                            <Button variant=\"primary\" className=\"w-100\" onClick={() => setAllDay(true)}>All day</Button>\n                            <Button variant=\"primary\" className=\"w-100 active\" onClick={() => setAllDay(false)}>Selected time</Button>\n                        </ButtonGroup>\n                    </Form.Floating>\n\n                    <Form.Floating controlid=\"formStartTime\" className=\"mt-3\">\n                        <Form.Control type=\"time\" className=\"top\" placeholder=\"Start Time *\" onChange={e => setStartTime(e.target.value)} defaultValue={startTime} required />\n                        <Form.Label>Time *</Form.Label>\n                    </Form.Floating>\n                </div>\n            );\n        }\n\n        return (\n            <Form className=\"formCard\" onSubmit={reminderCreate}>\n                <p className=\"text-center\">\n                    <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                </p>\n\n                <h1 className=\"h3 mb-3 fw-normal text-center\">Create reminder</h1>\n\n                <Form.Floating controlid=\"formName\">\n                    <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} required />\n                    <Form.Label>Name *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formDescription\">\n                    <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} />\n                    <Form.Label>Description</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                    <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                    <Form.Label>Date *</Form.Label>\n                </Form.Floating>\n\n                {selectAllDay}\n\n                <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                    <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={props.user.main_calendar} >\n                        {calendarsList}\n                    </Form.Select>\n                    <Form.Label>Calendar *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formColor\">\n                    <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue=\"\">\n                        <option value=\"0\">Color of calendar</option>\n                        <option value=\"1\">&#x1F33A; Red</option>\n                        <option value=\"2\">&#x1F3C0; Orange</option>\n                        <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                        <option value=\"4\">&#x1F966; Green</option>\n                        <option value=\"5\">&#x1F40B; Blue</option>\n                        <option value=\"6\">&#x1F47E; Purple</option>\n                    </Form.Select>\n                    <Form.Label>Color *</Form.Label>\n                </Form.Floating>\n\n                <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100 mt-3\"><PlusCircleDotted /> Create reminder</Button>\n                <Link to=\"/\" className=\"btn btn-outline-secondary w-100 mt-3\"><ChevronLeft />Go back to Calendar</Link>\n            </Form>\n        );\n    }\n};\n\nexport default ReminderCreate;\n","import moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Form, Spinner } from 'react-bootstrap';\nimport { ChevronLeft, PlusCircleDotted } from 'react-bootstrap-icons';\n\nimport { Link, Redirect } from \"react-router-dom\";\n\n\nconst TaskCreate = (props) => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const [startDate, setStartDate] = useState(moment().format(\"YYYY-MM-DD\"));\n    const [isDone] = useState(false);\n\n    const [calendar, setCalendar] = useState(props.user.main_calendar);\n    const [color, setColor] = useState('');\n\n    const [taskCreateRedirect, setTaskCreateRedirect] = useState(false);\n\n    const [calendars, setCalendars] = useState('');\n    const [calendarsLoaded, setCalendarsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const taskCreate = (e) => {\n        e.preventDefault();\n\n        const is_done = isDone;\n        const calendar_id = calendar;\n\n        let start = startDate + \" 00:00:00\";\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/task/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({\n                name,\n                description,\n                start,\n                is_done,\n                calendar_id,\n                color\n            })\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setTaskCreateRedirect(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (taskCreateRedirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    const fetchData = () => {\n        setCalendarsLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/calendar/index', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setCalendars(response);\n                setCalendarsLoaded(true);\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    if (calendarsLoaded === false) {\n        return (\n            <div className=\"text-center mt-5\">\n                <Spinner animation=\"grow\" variant=\"primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </Spinner>\n            </div>\n        );\n    }\n    else {\n        let calendarsList = calendars.map((calendar) => {\n            return (\n                <option value={calendar.id} key={calendar.id}>{calendar.name} {calendar.id === props.user.main_calendar ? '(Main)' : ''}</option>\n            );\n        })\n\n        return (\n            <Form className=\"formCard\" onSubmit={taskCreate}>\n                <p className=\"text-center\">\n                    <img className=\"mb-4\" src=\"/logo.png\" alt=\"PLANSE\" />\n                </p>\n\n                <h1 className=\"h3 mb-3 fw-normal text-center\">Create task</h1>\n\n                <Form.Floating controlid=\"formName\">\n                    <Form.Control type=\"text\" className=\"top\" placeholder=\"Name\" onChange={e => setName(e.target.value)} required />\n                    <Form.Label>Name *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formDescription\">\n                    <Form.Control type=\"text\" className=\"bottom\" placeholder=\"Description\" onChange={e => setDescription(e.target.value)} />\n                    <Form.Label>Description</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formStartDate\" className=\"mt-3\">\n                    <Form.Control type=\"date\" className=\"top\" placeholder=\"Start Date *\" onChange={e => setStartDate(e.target.value)} defaultValue={startDate} required />\n                    <Form.Label>Date *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formCalendar\" className=\"mt-3\">\n                    <Form.Select className=\"top\" aria-label=\"Calendar *\" onChange={e => setCalendar(e.target.value)} defaultValue={props.user.main_calendar} >\n                        {calendarsList}\n                    </Form.Select>\n                    <Form.Label>Calendar *</Form.Label>\n                </Form.Floating>\n\n                <Form.Floating controlid=\"formColor\">\n                    <Form.Select className=\"bottom\" aria-label=\"Color *\" onChange={e => setColor(e.target.value)} defaultValue=\"\">\n                        <option value=\"0\">Color of calendar</option>\n                        <option value=\"1\">&#x1F33A; Red</option>\n                        <option value=\"2\">&#x1F3C0; Orange</option>\n                        <option value=\"3\">&#x2600;&#xFE0F; Yellow</option>\n                        <option value=\"4\">&#x1F966; Green</option>\n                        <option value=\"5\">&#x1F40B; Blue</option>\n                        <option value=\"6\">&#x1F47E; Purple</option>\n                    </Form.Select>\n                    <Form.Label>Color *</Form.Label>\n                </Form.Floating>\n\n                <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"w-100 mt-3\"><PlusCircleDotted /> Create task</Button>\n                <Link to=\"/\" className=\"btn btn-outline-secondary w-100 mt-3\"><ChevronLeft />Go back to Calendar</Link>\n            </Form>\n        );\n    }\n};\n\nexport default TaskCreate;\n","import React, { useEffect, useState } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport Login from './components/account/Login';\nimport Register from './components/account/Register';\nimport Logout from './components/account/Logout';\n\nimport CalendarMain from './components/CalendarMain';\nimport CalendarCreate from './components/calendars/CalendarCreate';\nimport CalendarEdit from './components/calendars/CalendarEdit';\nimport CalendarUpdateMain from './components/calendars/CalendarUpdateMain';\nimport CalendarDelete from './components/calendars/CalendarDelete';\n\nimport EventCreate from './components/events/EventCreate';\nimport ArrangementCreate from './components/events/ArrangementCreate';\nimport ReminderCreate from 'components/events/ReminderCreate';\nimport TaskCreate from 'components/events/TaskCreate';\n\n\nfunction App() {\n    const [user, setUser] = useState([]);\n    const [userLoaded, setUserLoaded] = useState(false);\n\n    useEffect(() => {\n        fetchUser();\n    }, []);\n\n    const fetchUser = () => {\n        setUserLoaded(false);\n\n        fetch(process.env.REACT_APP_DOMAIN + '/api/user', {\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n        })\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                        error.response = response;\n\n                        throw error;\n                    }\n                },\n                error => {\n                    throw error;\n                }\n            )\n            .then(response => response.json())\n            .then(response => {\n                setUser(response);\n                setUserLoaded(true);\n            })\n            .catch(error => {\n                setUserLoaded(true);\n            });\n    }\n\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Route path=\"/\" exact component={() => <CalendarMain user={user} userLoaded={userLoaded} />} />\n                <Route path=\"/login\" component={() => <Login setUser={setUser} />} />\n                <Route path=\"/register\" component={() => <Register setUser={setUser} />} />\n                <Route path=\"/logout\" component={() => <Logout user={user} setUser={setUser} />} />\n\n                <Route path=\"/calendar/create\" component={() => <CalendarCreate user={user} />} />\n                <Route path=\"/calendar/edit/:id\" component={() => <CalendarEdit user={user} />} />\n                <Route path=\"/calendar/editMain/:id\" component={() => <CalendarUpdateMain user={user} setUser={setUser} />} />\n                <Route path=\"/calendar/delete/:id\" component={() => <CalendarDelete user={user} />} />\n\n                <Route path=\"/event/create\" component={() => <EventCreate user={user} />} />\n                <Route path=\"/arrangement/create\" component={() => <ArrangementCreate user={user} />} />\n                <Route path=\"/reminder/create\" component={() => <ReminderCreate user={user} />} />\n                <Route path=\"/task/create\" component={() => <TaskCreate user={user} />} />\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}